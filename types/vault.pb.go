// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/v1/vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VaultAccount represents a central holding place for assets, governed by a set of rules.
// It is based on the ERC-4626 standard and builds upon the Provenance Marker module.
type VaultAccount struct {
	// base_account cosmos account information including address and coin holdings.
	*types.BaseAccount `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,embedded=base_account" json:"base_account,omitempty"`
	// share_denom is the denomination used to represent shares in the vault (e.g., vault tokens).
	ShareDenom string `protobuf:"bytes,2,opt,name=share_denom,json=shareDenom,proto3" json:"share_denom,omitempty"`
	// underlying_asset is the vaultâ€™s single principal collateral AND valuation/base unit.
	// - Exactly one denom.
	// - Total Vault Value (TVV) and NAV-per-share are computed and reported in this denom.
	// - Interest accrual and internal accounting are measured in this denom.
	// - Any other coin accepted for I/O must have a NAV record priced INTO this denom.
	UnderlyingAsset string `protobuf:"bytes,3,opt,name=underlying_asset,json=underlyingAsset,proto3" json:"underlying_asset,omitempty"`
	// payment_denom is the single optional external payment coin supported for user I/O
	// alongside the underlying_asset.
	// - If unset, the vault operates single-denom: deposits/withdrawals only in underlying_asset.
	// - If set, swap-in/out accept either underlying_asset OR payment_denom (one denom per call).
	// - Must differ from share_denom and underlying_asset.
	// - Requires an on-chain NAV record mapping payment_denom -> underlying_asset to value deposits
	//   and redemptions.
	PaymentDenom string `protobuf:"bytes,4,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
	// admin is the address that has administrative privileges over the vault.
	Admin string `protobuf:"bytes,5,opt,name=admin,proto3" json:"admin,omitempty"`
	// current_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the actual annual interest rate currently being applied.
	// This may be adjusted programmatically (e.g., due to lack of funds).
	CurrentInterestRate string `protobuf:"bytes,6,opt,name=current_interest_rate,json=currentInterestRate,proto3" json:"current_interest_rate,omitempty"`
	// desired_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the target annual interest rate that the vault intends to apply.
	DesiredInterestRate string `protobuf:"bytes,7,opt,name=desired_interest_rate,json=desiredInterestRate,proto3" json:"desired_interest_rate,omitempty"`
	// min_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the lowest annual interest rate the admin is allowed to set.
	// If unset (empty string), there is no lower limit.
	MinInterestRate string `protobuf:"bytes,8,opt,name=min_interest_rate,json=minInterestRate,proto3" json:"min_interest_rate,omitempty"`
	// max_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the highest annual interest rate the admin is allowed to set.
	// If unset (empty string), there is no upper limit.
	MaxInterestRate string `protobuf:"bytes,9,opt,name=max_interest_rate,json=maxInterestRate,proto3" json:"max_interest_rate,omitempty"`
	// The start time (in Unix seconds) of the current interest accrual period.
	PeriodStart int64 `protobuf:"varint,10,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	// The expire time (in Unix seconds) of the current interest accrual period.
	PeriodTimeout int64 `protobuf:"varint,11,opt,name=period_timeout,json=periodTimeout,proto3" json:"period_timeout,omitempty"`
	// swap_in_enabled indicates whether users are allowed to deposit into the vault.
	SwapInEnabled bool `protobuf:"varint,12,opt,name=swap_in_enabled,json=swapInEnabled,proto3" json:"swap_in_enabled,omitempty"`
	// swap_out_enabled indicates whether users are allowed to withdraw from the vault.
	SwapOutEnabled bool `protobuf:"varint,13,opt,name=swap_out_enabled,json=swapOutEnabled,proto3" json:"swap_out_enabled,omitempty"`
	// withdrawal_delay_seconds is the configured time period (in seconds) that a withdrawal
	// request must wait in the pending queue before being processed.
	WithdrawalDelaySeconds uint64 `protobuf:"varint,14,opt,name=withdrawal_delay_seconds,json=withdrawalDelaySeconds,proto3" json:"withdrawal_delay_seconds,omitempty"`
}

func (m *VaultAccount) Reset()         { *m = VaultAccount{} }
func (m *VaultAccount) String() string { return proto.CompactTextString(m) }
func (*VaultAccount) ProtoMessage()    {}
func (*VaultAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{0}
}
func (m *VaultAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultAccount.Merge(m, src)
}
func (m *VaultAccount) XXX_Size() int {
	return m.Size()
}
func (m *VaultAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultAccount.DiscardUnknown(m)
}

var xxx_messageInfo_VaultAccount proto.InternalMessageInfo

func (m *VaultAccount) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

func (m *VaultAccount) GetUnderlyingAsset() string {
	if m != nil {
		return m.UnderlyingAsset
	}
	return ""
}

func (m *VaultAccount) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

func (m *VaultAccount) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *VaultAccount) GetCurrentInterestRate() string {
	if m != nil {
		return m.CurrentInterestRate
	}
	return ""
}

func (m *VaultAccount) GetDesiredInterestRate() string {
	if m != nil {
		return m.DesiredInterestRate
	}
	return ""
}

func (m *VaultAccount) GetMinInterestRate() string {
	if m != nil {
		return m.MinInterestRate
	}
	return ""
}

func (m *VaultAccount) GetMaxInterestRate() string {
	if m != nil {
		return m.MaxInterestRate
	}
	return ""
}

func (m *VaultAccount) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *VaultAccount) GetPeriodTimeout() int64 {
	if m != nil {
		return m.PeriodTimeout
	}
	return 0
}

func (m *VaultAccount) GetSwapInEnabled() bool {
	if m != nil {
		return m.SwapInEnabled
	}
	return false
}

func (m *VaultAccount) GetSwapOutEnabled() bool {
	if m != nil {
		return m.SwapOutEnabled
	}
	return false
}

func (m *VaultAccount) GetWithdrawalDelaySeconds() uint64 {
	if m != nil {
		return m.WithdrawalDelaySeconds
	}
	return 0
}

// AccountBalance represents the coin balance of a single account.
type AccountBalance struct {
	// address is the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// coins is the balance of the account.
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountBalance) Reset()         { *m = AccountBalance{} }
func (m *AccountBalance) String() string { return proto.CompactTextString(m) }
func (*AccountBalance) ProtoMessage()    {}
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{1}
}
func (m *AccountBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountBalance.Merge(m, src)
}
func (m *AccountBalance) XXX_Size() int {
	return m.Size()
}
func (m *AccountBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountBalance.DiscardUnknown(m)
}

var xxx_messageInfo_AccountBalance proto.InternalMessageInfo

// PendingWithdrawal are withdrawals that have not yet been processed and completed.
type PendingWithdrawal struct {
	// owner is the address of the user awaiting payout.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// vault_address is the address of the vault processing the withdrawal.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// shares are the shares that were escrowed by the user.
	Shares types1.Coin `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares"`
	// assets are the calculated assets to be paid out to the user.
	Assets types1.Coin `protobuf:"bytes,4,opt,name=assets,proto3" json:"assets"`
}

func (m *PendingWithdrawal) Reset()         { *m = PendingWithdrawal{} }
func (m *PendingWithdrawal) String() string { return proto.CompactTextString(m) }
func (*PendingWithdrawal) ProtoMessage()    {}
func (*PendingWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{2}
}
func (m *PendingWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingWithdrawal.Merge(m, src)
}
func (m *PendingWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *PendingWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_PendingWithdrawal proto.InternalMessageInfo

func (m *PendingWithdrawal) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PendingWithdrawal) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *PendingWithdrawal) GetShares() types1.Coin {
	if m != nil {
		return m.Shares
	}
	return types1.Coin{}
}

func (m *PendingWithdrawal) GetAssets() types1.Coin {
	if m != nil {
		return m.Assets
	}
	return types1.Coin{}
}

func init() {
	proto.RegisterType((*VaultAccount)(nil), "vault.v1.VaultAccount")
	proto.RegisterType((*AccountBalance)(nil), "vault.v1.AccountBalance")
	proto.RegisterType((*PendingWithdrawal)(nil), "vault.v1.PendingWithdrawal")
}

func init() { proto.RegisterFile("vault/v1/vault.proto", fileDescriptor_6c8870a404251180) }

var fileDescriptor_6c8870a404251180 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd3, 0x4a,
	0x18, 0x8e, 0xdb, 0xa4, 0x4d, 0x27, 0x97, 0xb6, 0x3e, 0x39, 0x47, 0xee, 0x59, 0x24, 0xa6, 0x08,
	0x64, 0x16, 0x4d, 0x48, 0x59, 0x70, 0x91, 0x90, 0x68, 0x28, 0x12, 0x5d, 0x81, 0x5c, 0x04, 0x12,
	0x1b, 0x6b, 0xec, 0x19, 0x25, 0x23, 0xec, 0x99, 0x68, 0x66, 0x9c, 0x34, 0x6f, 0xc0, 0x92, 0x1d,
	0xdb, 0xae, 0x59, 0xf7, 0x21, 0xba, 0xac, 0xba, 0x62, 0x55, 0x50, 0xbb, 0xe9, 0x03, 0xf0, 0x00,
	0x68, 0x2e, 0x49, 0x69, 0x91, 0x02, 0x2b, 0xfb, 0xff, 0x6e, 0xfe, 0xc7, 0xfa, 0xff, 0x01, 0x8d,
	0x11, 0xcc, 0x53, 0xd9, 0x19, 0x75, 0x3b, 0xfa, 0xa5, 0x3d, 0xe4, 0x4c, 0x32, 0xb7, 0x6c, 0x8a,
	0x51, 0xf7, 0xff, 0x66, 0xc2, 0x44, 0xc6, 0x44, 0x07, 0xe6, 0x72, 0xd0, 0x19, 0x75, 0x63, 0x2c,
	0x61, 0x57, 0x17, 0x46, 0x39, 0xe3, 0x63, 0x28, 0xf0, 0x8c, 0x4f, 0x18, 0xa1, 0x96, 0xdf, 0x30,
	0x7c, 0xa4, 0xab, 0x8e, 0x29, 0x2c, 0xd5, 0xe8, 0xb3, 0x3e, 0x33, 0xb8, 0x7a, 0x33, 0xe8, 0xe6,
	0x65, 0x09, 0x54, 0xdf, 0xaa, 0xaf, 0xef, 0x24, 0x09, 0xcb, 0xa9, 0x74, 0xf7, 0x40, 0x55, 0x85,
	0x47, 0xd0, 0xd4, 0x9e, 0xe3, 0x3b, 0x41, 0x65, 0xdb, 0x6f, 0xdb, 0x2c, 0xdd, 0x8b, 0xfd, 0x70,
	0xbb, 0x07, 0x05, 0xb6, 0xbe, 0x5e, 0xf1, 0xe4, 0xac, 0xe5, 0x84, 0x95, 0xf8, 0x0a, 0x72, 0x5b,
	0xa0, 0x22, 0x06, 0x90, 0xe3, 0x08, 0x61, 0xca, 0x32, 0x6f, 0xc1, 0x77, 0x82, 0x95, 0x10, 0x68,
	0x68, 0x57, 0x21, 0xee, 0x3d, 0xb0, 0x96, 0x53, 0x84, 0x79, 0x3a, 0x21, 0xb4, 0x1f, 0x41, 0x21,
	0xb0, 0xf4, 0x16, 0xb5, 0x6a, 0xf5, 0x0a, 0xdf, 0x51, 0xb0, 0x7b, 0x1b, 0xd4, 0x86, 0x70, 0x92,
	0x61, 0x2a, 0x6d, 0x5a, 0x51, 0xeb, 0xaa, 0x16, 0x34, 0x79, 0x6d, 0x50, 0x82, 0x28, 0x23, 0xd4,
	0x2b, 0x29, 0xb2, 0xe7, 0x9d, 0x1e, 0x6d, 0x35, 0x6c, 0xdf, 0x3b, 0x08, 0x71, 0x2c, 0xc4, 0xbe,
	0xe4, 0x84, 0xf6, 0x43, 0x23, 0x73, 0x5f, 0x82, 0x7f, 0x93, 0x9c, 0x73, 0x15, 0x4a, 0xa8, 0xc4,
	0x1c, 0x0b, 0x19, 0x71, 0x28, 0xb1, 0xb7, 0xa4, 0xfd, 0x8d, 0xd3, 0xa3, 0xad, 0x35, 0xeb, 0xdf,
	0xc5, 0x89, 0xf5, 0xfe, 0x63, 0x2d, 0x7b, 0xd6, 0x11, 0x42, 0x89, 0x55, 0x12, 0xc2, 0x82, 0x70,
	0x8c, 0x6e, 0x24, 0x2d, 0xcf, 0x4b, 0xb2, 0x96, 0x6b, 0x49, 0xcf, 0xc0, 0x7a, 0x46, 0xe8, 0x8d,
	0x94, 0xf2, 0x9c, 0x94, 0xd5, 0x8c, 0xd0, 0xdf, 0x12, 0xe0, 0xc1, 0x8d, 0x84, 0x95, 0xb9, 0x09,
	0xf0, 0xe0, 0x5a, 0xc2, 0x2d, 0x50, 0x1d, 0x62, 0x4e, 0x18, 0x8a, 0x84, 0x84, 0x5c, 0x7a, 0xc0,
	0x77, 0x82, 0xc5, 0xb0, 0x62, 0xb0, 0x7d, 0x05, 0xb9, 0x77, 0x40, 0xdd, 0x4a, 0x24, 0xc9, 0x30,
	0xcb, 0xa5, 0x57, 0xd1, 0xa2, 0x9a, 0x41, 0xdf, 0x18, 0xd0, 0xbd, 0x0b, 0x56, 0xc5, 0x18, 0x0e,
	0x23, 0x42, 0x23, 0x4c, 0x61, 0x9c, 0x62, 0xe4, 0x55, 0x7d, 0x27, 0x28, 0x87, 0x35, 0x05, 0xef,
	0xd1, 0x17, 0x06, 0x74, 0x03, 0xb0, 0xa6, 0x75, 0x2c, 0x97, 0x33, 0x61, 0x4d, 0x0b, 0xeb, 0x0a,
	0x7f, 0x95, 0xcb, 0xa9, 0xf2, 0x11, 0xf0, 0xc6, 0x44, 0x0e, 0x10, 0x87, 0x63, 0x98, 0x46, 0x08,
	0xa7, 0x70, 0x12, 0x09, 0x9c, 0x30, 0x8a, 0x84, 0x57, 0xf7, 0x9d, 0xa0, 0x18, 0xfe, 0x77, 0xc5,
	0xef, 0x2a, 0x7a, 0xdf, 0xb0, 0x9b, 0x9f, 0x1d, 0x50, 0x9f, 0x4e, 0x2b, 0x4c, 0x21, 0x4d, 0xb0,
	0xeb, 0x81, 0x65, 0x68, 0x06, 0x43, 0xcf, 0xf9, 0x4a, 0x38, 0x2d, 0x5d, 0x08, 0x4a, 0x6a, 0xad,
	0x84, 0xb7, 0xe0, 0x2f, 0x06, 0x95, 0xed, 0x8d, 0xe9, 0xfc, 0xab, 0xf9, 0x9e, 0xcd, 0xff, 0x73,
	0x46, 0x68, 0xef, 0xfe, 0xf1, 0x59, 0xab, 0xf0, 0xe5, 0x5b, 0x2b, 0xe8, 0x13, 0x39, 0xc8, 0xe3,
	0x76, 0xc2, 0x32, 0xbb, 0x78, 0xf6, 0xb1, 0x25, 0xd0, 0x87, 0x8e, 0x9c, 0x0c, 0xb1, 0xd0, 0x06,
	0x11, 0x9a, 0xe4, 0x27, 0xe5, 0x8f, 0x87, 0xad, 0xc2, 0xe5, 0x61, 0xab, 0xb0, 0xf9, 0xc3, 0x01,
	0xeb, 0xaf, 0x31, 0x45, 0x84, 0xf6, 0xdf, 0xcd, 0x7a, 0x57, 0xd3, 0xcc, 0xc6, 0x14, 0x73, 0xd3,
	0xda, 0xbc, 0x69, 0xd6, 0x32, 0xf7, 0x29, 0xa8, 0xe9, 0x7b, 0x24, 0x9a, 0x1e, 0x69, 0xe1, 0x0f,
	0xbe, 0xaa, 0x96, 0x5b, 0xcc, 0x7d, 0x08, 0x96, 0xf4, 0x6a, 0x0a, 0xbd, 0x82, 0x73, 0x8f, 0x5c,
	0x54, 0x47, 0x0e, 0xad, 0x5c, 0x19, 0xf5, 0xea, 0x0a, 0xbd, 0x93, 0x7f, 0x63, 0x34, 0xf2, 0xde,
	0xe3, 0xe3, 0xf3, 0xa6, 0x73, 0x72, 0xde, 0x74, 0xbe, 0x9f, 0x37, 0x9d, 0x4f, 0x17, 0xcd, 0xc2,
	0xc9, 0x45, 0xb3, 0xf0, 0xf5, 0xa2, 0x59, 0x78, 0xdf, 0xfa, 0xe5, 0x5f, 0x0e, 0x39, 0x1b, 0xa5,
	0x30, 0x16, 0xe6, 0xc6, 0x34, 0x3f, 0x32, 0x5e, 0xd2, 0xb7, 0xd7, 0x83, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1d, 0x42, 0x10, 0xa6, 0x50, 0x05, 0x00, 0x00,
}

func (m *VaultAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalDelaySeconds != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.WithdrawalDelaySeconds))
		i--
		dAtA[i] = 0x70
	}
	if m.SwapOutEnabled {
		i--
		if m.SwapOutEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.SwapInEnabled {
		i--
		if m.SwapInEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.PeriodTimeout != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.PeriodTimeout))
		i--
		dAtA[i] = 0x58
	}
	if m.PeriodStart != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.PeriodStart))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MaxInterestRate) > 0 {
		i -= len(m.MaxInterestRate)
		copy(dAtA[i:], m.MaxInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.MaxInterestRate)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MinInterestRate) > 0 {
		i -= len(m.MinInterestRate)
		copy(dAtA[i:], m.MinInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.MinInterestRate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DesiredInterestRate) > 0 {
		i -= len(m.DesiredInterestRate)
		copy(dAtA[i:], m.DesiredInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DesiredInterestRate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CurrentInterestRate) > 0 {
		i -= len(m.CurrentInterestRate)
		copy(dAtA[i:], m.CurrentInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CurrentInterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnderlyingAsset) > 0 {
		i -= len(m.UnderlyingAsset)
		copy(dAtA[i:], m.UnderlyingAsset)
		i = encodeVarintVault(dAtA, i, uint64(len(m.UnderlyingAsset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseAccount != nil {
		{
			size, err := m.BaseAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVault(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintVault(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccount != nil {
		l = m.BaseAccount.Size()
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.UnderlyingAsset)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.CurrentInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.DesiredInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.MinInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.MaxInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.PeriodStart != 0 {
		n += 1 + sovVault(uint64(m.PeriodStart))
	}
	if m.PeriodTimeout != 0 {
		n += 1 + sovVault(uint64(m.PeriodTimeout))
	}
	if m.SwapInEnabled {
		n += 2
	}
	if m.SwapOutEnabled {
		n += 2
	}
	if m.WithdrawalDelaySeconds != 0 {
		n += 1 + sovVault(uint64(m.WithdrawalDelaySeconds))
	}
	return n
}

func (m *AccountBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func (m *PendingWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.Assets.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAccount == nil {
				m.BaseAccount = &types.BaseAccount{}
			}
			if err := m.BaseAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
			}
			m.PeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodTimeout", wireType)
			}
			m.PeriodTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapInEnabled = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapOutEnabled = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDelaySeconds", wireType)
			}
			m.WithdrawalDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalDelaySeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
