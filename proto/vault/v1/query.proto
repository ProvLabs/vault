syntax = "proto3";
package vault.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "vault/v1/vault.proto";

option go_package = "github.com/provlabs/vault/types";

// Query is the service for the vault module's query endpoints.
service Query {
  // Vaults returns a paginated list of all vaults.
  rpc Vaults(QueryVaultsRequest) returns (QueryVaultsResponse) {
    option (google.api.http).get = "/vault/v1/vaults";
  }

  // Vault returns the configuration and state of a specific vault.
  rpc Vault(QueryVaultRequest) returns (QueryVaultResponse) {
    option (google.api.http).get = "/vault/v1/vaults/{id}";
  }

  // EstimateSwapIn estimates the amount of shares that would be received for a given amount of underlying assets.
  rpc EstimateSwapIn(QueryEstimateSwapInRequest) returns (QueryEstimateSwapInResponse) {
    option (google.api.http).get = "/vault/v1/vaults/{vault_address}/estimate_swap_in";
  }

  // EstimateSwapOut estimates the amount of underlying assets that would be received for a given amount of shares.
  rpc EstimateSwapOut(QueryEstimateSwapOutRequest) returns (QueryEstimateSwapOutResponse) {
    option (google.api.http).get = "/vault/v1/vaults/{vault_address}/estimate_swap_out";
  }

  // PendingWithdrawals returns a paginated list of all pending withdrawals.
  rpc PendingWithdrawals(QueryPendingWithdrawalsRequest) returns (QueryPendingWithdrawalsResponse) {
    option (google.api.http).get = "/vault/v1/pending_withdrawals";
  }
}

// QueryPendingWithdrawalsRequest is the request message for the Query/PendingWithdrawals endpoint.
message QueryPendingWithdrawalsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryPendingWithdrawalsResponse is the response message for the Query/PendingWithdrawals endpoint.
message QueryPendingWithdrawalsResponse {
  // pending_withdrawals is a list of all pending withdrawals.
  repeated PendingWithdrawalWithTimeout pending_withdrawals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// PendingWithdrawalWithTimeout is a pending withdrawal with its timeout.
message PendingWithdrawalWithTimeout {
  PendingWithdrawal pending_withdrawal = 1 [(gogoproto.nullable) = false];
  google.protobuf.Timestamp timeout = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}

// QueryVaultsRequest is the request message for the Query/Vaults endpoint.
message QueryVaultsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryVaultsResponse is the response message for the Query/Vaults endpoint.
message QueryVaultsResponse {
  // vaults is a list of all vaults.
  repeated VaultAccount vaults = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryVaultRequest is the request message for the Query/Vault endpoint.
message QueryVaultRequest {
  // id is the bech32 address of the vault or the vault's share denom to query.
  string id = 1;
}

// QueryVaultResponse is the response message for the Query/Vault endpoint.
message QueryVaultResponse {
  // vault is the requested vault.
  VaultAccount vault = 1 [(gogoproto.nullable) = false];
  // principal is the total amount of principal held in the vault's marker.
  AccountBalance principal = 2 [(gogoproto.nullable) = false];
  // reserves is the total amount of reserves held in the vault account for interest payments.
  AccountBalance reserves = 3 [(gogoproto.nullable) = false];
}

// QueryEstimateSwapInRequest is the request message for the Query/EstimateSwapIn endpoint.
message QueryEstimateSwapInRequest {
  // vault_address is the bech32 address of the vault to query.
  string vault_address = 1;
  // assets is the amount of underlying assets to swap in.
  cosmos.base.v1beta1.Coin assets = 2 [(gogoproto.nullable) = false];
}

// QueryEstimateSwapInResponse is the response message for the Query/EstimateSwapIn endpoint.
message QueryEstimateSwapInResponse {
  // assets is the estimated amount of shares that would be received.
  cosmos.base.v1beta1.Coin assets = 1 [(gogoproto.nullable) = false];
  // The block height when the estimate occurred.
  int64 height = 2;
  // The UTC block time when the estimate occurred.
  google.protobuf.Timestamp time = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}

// QueryEstimateSwapOutRequest is the request message for the Query/EstimateSwapOut endpoint.
message QueryEstimateSwapOutRequest {
  // vault_address is the bech32 address of the vault to query.
  string vault_address = 1;
  // assets is the amount of shares to swap out.
  cosmos.base.v1beta1.Coin assets = 2 [(gogoproto.nullable) = false];
}

// QueryEstimateSwapOutResponse is the response message for the Query/EstimateSwapOut endpoint.
message QueryEstimateSwapOutResponse {
  // assets is the estimated amount of underlying assets that would be received.
  cosmos.base.v1beta1.Coin assets = 1 [(gogoproto.nullable) = false];
  // The block height when the estimate occurred.
  int64 height = 2;
  // The UTC block time when the estimate occurred.
  google.protobuf.Timestamp time = 3 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
}
