// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueueEntry struct {
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *QueueEntry) Reset()         { *m = QueueEntry{} }
func (m *QueueEntry) String() string { return proto.CompactTextString(m) }
func (*QueueEntry) ProtoMessage()    {}
func (*QueueEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c971b352fb6cc17, []int{0}
}
func (m *QueueEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueEntry.Merge(m, src)
}
func (m *QueueEntry) XXX_Size() int {
	return m.Size()
}
func (m *QueueEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueEntry.DiscardUnknown(m)
}

var xxx_messageInfo_QueueEntry proto.InternalMessageInfo

func (m *QueueEntry) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *QueueEntry) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type PendingWithdrawalQueueEntry struct {
	Time       int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Id         uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Withdrawal PendingWithdrawal `protobuf:"bytes,3,opt,name=withdrawal,proto3" json:"withdrawal"`
}

func (m *PendingWithdrawalQueueEntry) Reset()         { *m = PendingWithdrawalQueueEntry{} }
func (m *PendingWithdrawalQueueEntry) String() string { return proto.CompactTextString(m) }
func (*PendingWithdrawalQueueEntry) ProtoMessage()    {}
func (*PendingWithdrawalQueueEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c971b352fb6cc17, []int{1}
}
func (m *PendingWithdrawalQueueEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingWithdrawalQueueEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingWithdrawalQueueEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingWithdrawalQueueEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingWithdrawalQueueEntry.Merge(m, src)
}
func (m *PendingWithdrawalQueueEntry) XXX_Size() int {
	return m.Size()
}
func (m *PendingWithdrawalQueueEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingWithdrawalQueueEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PendingWithdrawalQueueEntry proto.InternalMessageInfo

func (m *PendingWithdrawalQueueEntry) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PendingWithdrawalQueueEntry) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingWithdrawalQueueEntry) GetWithdrawal() PendingWithdrawal {
	if m != nil {
		return m.Withdrawal
	}
	return PendingWithdrawal{}
}

type PendingWithdrawalQueue struct {
	LatestSequenceNumber uint64                        `protobuf:"varint,1,opt,name=latest_sequence_number,json=latestSequenceNumber,proto3" json:"latest_sequence_number,omitempty"`
	Entries              []PendingWithdrawalQueueEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries"`
}

func (m *PendingWithdrawalQueue) Reset()         { *m = PendingWithdrawalQueue{} }
func (m *PendingWithdrawalQueue) String() string { return proto.CompactTextString(m) }
func (*PendingWithdrawalQueue) ProtoMessage()    {}
func (*PendingWithdrawalQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c971b352fb6cc17, []int{2}
}
func (m *PendingWithdrawalQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingWithdrawalQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingWithdrawalQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingWithdrawalQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingWithdrawalQueue.Merge(m, src)
}
func (m *PendingWithdrawalQueue) XXX_Size() int {
	return m.Size()
}
func (m *PendingWithdrawalQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingWithdrawalQueue.DiscardUnknown(m)
}

var xxx_messageInfo_PendingWithdrawalQueue proto.InternalMessageInfo

func (m *PendingWithdrawalQueue) GetLatestSequenceNumber() uint64 {
	if m != nil {
		return m.LatestSequenceNumber
	}
	return 0
}

func (m *PendingWithdrawalQueue) GetEntries() []PendingWithdrawalQueueEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// GenesisState defines the vault module's genesis state.
// NOTE: payout verification queue is not imported or exported.  It will always be empty after endblocker processes it.
type GenesisState struct {
	// vaults defines the vaults that exist at genesis.
	Vaults []VaultAccount `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
	// payout_timeout_queue contains (time, addr) entries for vaults that are
	// temporarily deferred from automatic payout/interest verification until the
	// given UNIX timestamp (seconds). These entries are re-enqueued on InitGenesis.
	PayoutTimeoutQueue []QueueEntry `protobuf:"bytes,2,rep,name=payout_timeout_queue,json=payoutTimeoutQueue,proto3" json:"payout_timeout_queue"`
	// pending_withdrawal_queue contains entries for pending withdrawals.
	PendingWithdrawalQueue PendingWithdrawalQueue `protobuf:"bytes,3,opt,name=pending_withdrawal_queue,json=pendingWithdrawalQueue,proto3" json:"pending_withdrawal_queue"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c971b352fb6cc17, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetVaults() []VaultAccount {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *GenesisState) GetPayoutTimeoutQueue() []QueueEntry {
	if m != nil {
		return m.PayoutTimeoutQueue
	}
	return nil
}

func (m *GenesisState) GetPendingWithdrawalQueue() PendingWithdrawalQueue {
	if m != nil {
		return m.PendingWithdrawalQueue
	}
	return PendingWithdrawalQueue{}
}

func init() {
	proto.RegisterType((*QueueEntry)(nil), "vault.v1.QueueEntry")
	proto.RegisterType((*PendingWithdrawalQueueEntry)(nil), "vault.v1.PendingWithdrawalQueueEntry")
	proto.RegisterType((*PendingWithdrawalQueue)(nil), "vault.v1.PendingWithdrawalQueue")
	proto.RegisterType((*GenesisState)(nil), "vault.v1.GenesisState")
}

func init() { proto.RegisterFile("vault/v1/genesis.proto", fileDescriptor_4c971b352fb6cc17) }

var fileDescriptor_4c971b352fb6cc17 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6a, 0xd5, 0x40,
	0x14, 0x86, 0x33, 0xb9, 0xa1, 0xea, 0x54, 0x5c, 0x0c, 0x21, 0x84, 0x16, 0xd2, 0x10, 0x10, 0xb2,
	0x4a, 0x68, 0xed, 0xc6, 0x65, 0x85, 0xe2, 0x46, 0x44, 0x53, 0x51, 0x70, 0x13, 0x27, 0xc9, 0x90,
	0x0e, 0xe4, 0xce, 0xa4, 0x99, 0x99, 0x94, 0xbb, 0xf7, 0x01, 0xdc, 0xf8, 0x4e, 0x5d, 0x76, 0xe9,
	0x4a, 0xe4, 0xde, 0x57, 0xf0, 0x01, 0x24, 0x33, 0xd3, 0x46, 0xb8, 0x57, 0xbb, 0xca, 0xe1, 0x9c,
	0xf9, 0xbf, 0xfc, 0xff, 0x99, 0x81, 0xc1, 0x88, 0x55, 0x27, 0xf3, 0xf1, 0x38, 0x6f, 0x09, 0x23,
	0x82, 0x8a, 0xac, 0x1f, 0xb8, 0xe4, 0xe8, 0xb1, 0xee, 0x67, 0xe3, 0xf1, 0x81, 0xdf, 0xf2, 0x96,
	0xeb, 0x66, 0x3e, 0x55, 0x66, 0x7e, 0xe0, 0xdf, 0xeb, 0xcc, 0x41, 0xdd, 0x4d, 0x4e, 0x21, 0x7c,
	0xaf, 0x88, 0x22, 0xe7, 0x4c, 0x0e, 0x2b, 0x84, 0xa0, 0x27, 0xe9, 0x92, 0x84, 0x20, 0x06, 0xa9,
	0x57, 0xe8, 0x7a, 0xea, 0xe1, 0xa6, 0x19, 0x42, 0x37, 0x06, 0xe9, 0x93, 0x42, 0xd7, 0xc9, 0x57,
	0x00, 0x0f, 0xdf, 0x11, 0xd6, 0x50, 0xd6, 0x7e, 0xa2, 0xf2, 0xb2, 0x19, 0xf0, 0x35, 0xee, 0xfe,
	0xc1, 0x59, 0x58, 0xce, 0x33, 0xe8, 0xd2, 0x46, 0x53, 0xbc, 0xc2, 0xa5, 0x0d, 0x3a, 0x83, 0xf0,
	0xfa, 0x5e, 0x1b, 0x2e, 0x62, 0x90, 0xee, 0x9f, 0x1c, 0x66, 0x77, 0x21, 0xb2, 0x2d, 0xfc, 0x2b,
	0xef, 0xe6, 0xe7, 0x91, 0x53, 0xfc, 0x25, 0x4a, 0xbe, 0x03, 0x18, 0xec, 0xb6, 0x81, 0x4e, 0x61,
	0xd0, 0x61, 0x49, 0x84, 0x2c, 0x05, 0xb9, 0x52, 0x84, 0xd5, 0xa4, 0x64, 0x6a, 0x59, 0x91, 0xc1,
	0x66, 0xf3, 0xcd, 0xf4, 0xc2, 0x0e, 0xdf, 0xea, 0x19, 0x3a, 0x87, 0x8f, 0x08, 0x93, 0x03, 0x25,
	0x22, 0x74, 0xe3, 0x45, 0xba, 0x7f, 0xf2, 0xfc, 0x3f, 0x86, 0xe6, 0xbc, 0xd6, 0xda, 0x9d, 0x36,
	0xf9, 0x0d, 0xe0, 0xd3, 0xd7, 0xe6, 0x72, 0x2e, 0x24, 0x96, 0x93, 0x9b, 0x3d, 0xcd, 0x11, 0x21,
	0xd0, 0xd8, 0x60, 0xc6, 0x7e, 0x9c, 0x8a, 0xb3, 0xba, 0xe6, 0x8a, 0x49, 0xcb, 0xb1, 0x67, 0xd1,
	0x1b, 0xe8, 0xf7, 0x78, 0xc5, 0x95, 0x2c, 0xa7, 0x05, 0x4e, 0xdf, 0xab, 0xe9, 0x97, 0xd6, 0x9a,
	0x3f, 0x33, 0xb6, 0x9c, 0x20, 0xa3, 0xfb, 0x60, 0x64, 0x66, 0x23, 0x5f, 0x60, 0xd8, 0x9b, 0x08,
	0xe5, 0xbc, 0x42, 0x4b, 0x34, 0xdb, 0x8f, 0x1f, 0x0a, 0x6b, 0xe9, 0x41, 0xbf, 0x7b, 0xfa, 0xf2,
	0x66, 0x1d, 0x81, 0xdb, 0x75, 0x04, 0x7e, 0xad, 0x23, 0xf0, 0x6d, 0x13, 0x39, 0xb7, 0x9b, 0xc8,
	0xf9, 0xb1, 0x89, 0x9c, 0xcf, 0x47, 0x2d, 0x95, 0x97, 0xaa, 0xca, 0x6a, 0xbe, 0xcc, 0xfb, 0x81,
	0x8f, 0x1d, 0xae, 0x84, 0x79, 0x86, 0xb9, 0x5c, 0xf5, 0x44, 0x54, 0x7b, 0xfa, 0x35, 0xbe, 0xf8,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xad, 0x46, 0xb8, 0xdd, 0x02, 0x00, 0x00,
}

func (m *QueueEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingWithdrawalQueueEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingWithdrawalQueueEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingWithdrawalQueueEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Withdrawal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingWithdrawalQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingWithdrawalQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingWithdrawalQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LatestSequenceNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LatestSequenceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingWithdrawalQueue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PayoutTimeoutQueue) > 0 {
		for iNdEx := len(m.PayoutTimeoutQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PayoutTimeoutQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGenesis(uint64(m.Time))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *PendingWithdrawalQueueEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGenesis(uint64(m.Time))
	}
	if m.Id != 0 {
		n += 1 + sovGenesis(uint64(m.Id))
	}
	l = m.Withdrawal.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PendingWithdrawalQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestSequenceNumber != 0 {
		n += 1 + sovGenesis(uint64(m.LatestSequenceNumber))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PayoutTimeoutQueue) > 0 {
		for _, e := range m.PayoutTimeoutQueue {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.PendingWithdrawalQueue.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingWithdrawalQueueEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingWithdrawalQueueEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingWithdrawalQueueEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingWithdrawalQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingWithdrawalQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingWithdrawalQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestSequenceNumber", wireType)
			}
			m.LatestSequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestSequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, PendingWithdrawalQueueEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, VaultAccount{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutTimeoutQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayoutTimeoutQueue = append(m.PayoutTimeoutQueue, QueueEntry{})
			if err := m.PayoutTimeoutQueue[len(m.PayoutTimeoutQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingWithdrawalQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingWithdrawalQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
