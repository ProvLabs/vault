syntax = "proto3";
package vault.v1;

import "cosmos/auth/v1beta1/auth.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/provlabs/vault/types";

// VaultAccount represents a central holding place for assets, governed by a set of rules.
// It is based on the ERC-4626 standard and builds upon the Provenance Marker module.
message VaultAccount {
  // base_account cosmos account information including address and coin holdings.
  cosmos.auth.v1beta1.BaseAccount base_account = 1 [(gogoproto.embed) = true];
  // share_denom is the denomination used to represent shares in the vault (e.g., vault tokens).
  string share_denom = 2;
  // underlying_assets specifies the denomination(s) of the asset(s) managed by the vault.
  repeated string underlying_assets = 3;
  // admin is the address that has administrative privileges over the vault.
  string admin = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // current_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the actual annual interest rate currently being applied.
  // This may be adjusted programmatically (e.g., due to lack of funds).
  string current_interest_rate = 5 [(cosmos_proto.scalar) = "cosmos.DecString"];
  // desired_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the target annual interest rate that the vault intends to apply.
  string desired_interest_rate = 6 [(cosmos_proto.scalar) = "cosmos.DecString"];
  // min_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the lowest annual interest rate the admin is allowed to set.
  // If unset (empty string), there is no lower limit.
  string min_interest_rate = 7 [(cosmos_proto.scalar) = "cosmos.DecString"];
  // max_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the highest annual interest rate the admin is allowed to set.
  // If unset (empty string), there is no upper limit.
  string max_interest_rate = 8 [(cosmos_proto.scalar) = "cosmos.DecString"];
  // The start time (in Unix seconds) of the current interest accrual period.
  int64 period_start = 9;
  // The expire time (in Unix seconds) of the current interest accrual period.
  int64 period_timeout = 10;
  // swap_in_enabled indicates whether users are allowed to deposit into the vault.
  bool swap_in_enabled = 11;
  // swap_out_enabled indicates whether users are allowed to withdraw from the vault.
  bool swap_out_enabled = 12;
}

// AccountBalance represents the coin balance of a single account.
message AccountBalance {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // address is the account address.
  string address = 1;

  // coins is the balance of the account.
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// PendingWithdrawal are withdrawals that have not yet been processed and completed.
message PendingWithdrawal {
  // owner is the address initiating the swap out (withdraw).
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // vault_address is the address of the vault to redeem from.
  string vault_address = 2;
  // assets is the amount of underlying assets to withdraw.
  cosmos.base.v1beta1.Coin assets = 3 [(gogoproto.nullable) = false];
}
