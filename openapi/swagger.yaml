swagger: '2.0'
info:
  title: Vault API
  version: v1
paths:
  /vault/v1/pending_swap_outs:
    get:
      summary: PendingSwapOuts returns a paginated list of all pending swap outs.
      operationId: PendingSwapOuts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pendingSwapOuts:
                type: array
                items:
                  type: object
                  properties:
                    requestId:
                      type: string
                      format: uint64
                      description: >-
                        request_id is the unique identifier for the pending swap
                        out request.
                    pendingSwapOut:
                      description: >-
                        pending_swap_out contains the details of the swap out
                        request.
                      type: object
                      properties:
                        owner:
                          type: string
                          description: owner is the address initiating the swap out.
                        vaultAddress:
                          type: string
                          description: >-
                            vault_address is the address of the vault processing
                            the withdrawal.
                        shares:
                          description: >-
                            shares are the shares that were escrowed by the
                            user.
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                        redeemDenom:
                          type: string
                          description: >-
                            redeem_denom is the denomination of the asset to be
                            redeemed.
                    timeout:
                      type: string
                      format: date-time
                      description: >-
                        timeout is the time at which the pending swap out will
                        expire if not processed.
                  description: >-
                    PendingSwapOutWithTimeout is a pending swap out with its
                    timeout.
                description: pending_swap_outs is a list of all pending swap outs.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  nextKey:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryPendingSwapOutsResponse is the response message for the
              Query/PendingSwapOuts endpoint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /vault/v1/vaults:
    get:
      summary: Vaults returns a paginated list of all vaults.
      operationId: Vaults
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vaults:
                type: array
                items:
                  type: object
                  properties:
                    baseAccount:
                      description: >-
                        base_account cosmos account information including
                        address and coin holdings.
                      type: object
                      properties:
                        address:
                          type: string
                        pubKey:
                          type: object
                          properties:
                            '@type':
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com. As of May 2023, there are
                                no widely used type server

                                implementations and no plans to implement one.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                          additionalProperties: {}
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }
                                // or ...
                                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                                  foo = any.unpack(Foo.getDefaultInstance());
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".


                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        accountNumber:
                          type: string
                          format: uint64
                        sequence:
                          type: string
                          format: uint64
                    totalShares:
                      description: >-
                        total_shares is the total number of shares that have
                        ever been issued by the vault.

                        It serves as the canonical supply-of-record for all
                        shares, regardless of whether

                        they are held locally on Provenance or externally (e.g.,
                        bridged).
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    underlyingAsset:
                      type: string
                      description: >-
                        underlying_asset is the vault’s single principal
                        collateral AND valuation/base unit.

                        - Exactly one denom.

                        - Total Vault Value (TVV) and NAV-per-share are computed
                        and reported in this denom.

                        - Interest accrual and internal accounting are measured
                        in this denom.

                        - Any other coin accepted for I/O must have a NAV record
                        priced INTO this denom.
                    paymentDenom:
                      type: string
                      description: >-
                        payment_denom is the single optional external payment
                        coin supported for user I/O

                        alongside the underlying_asset.

                        - If unset, the vault operates single-denom:
                        deposits/withdrawals only in underlying_asset.

                        - If set, swap-in/out accept either underlying_asset OR
                        payment_denom (one denom per call).

                        - Must differ from share_denom and underlying_asset.

                        - Requires an on-chain NAV record mapping payment_denom
                        -> underlying_asset to value deposits
                          and redemptions.
                    admin:
                      type: string
                      description: >-
                        admin is the address that has administrative privileges
                        over the vault.
                    currentInterestRate:
                      type: string
                      description: >-
                        current_interest_rate is a decimal string (e.g., "0.9"
                        for 90% and "0.9001353" for 90.01353%) representing the
                        actual annual interest rate currently being applied.

                        This may be adjusted programmatically (e.g., due to lack
                        of funds).
                    desiredInterestRate:
                      type: string
                      description: >-
                        desired_interest_rate is a decimal string (e.g., "0.9"
                        for 90% and "0.9001353" for 90.01353%) representing the
                        target annual interest rate that the vault intends to
                        apply.
                    minInterestRate:
                      type: string
                      description: >-
                        min_interest_rate is a decimal string (e.g., "0.9" for
                        90% and "0.9001353" for 90.01353%) representing the
                        lowest annual interest rate the admin is allowed to set.

                        If unset (empty string), there is no lower limit.
                    maxInterestRate:
                      type: string
                      description: >-
                        max_interest_rate is a decimal string (e.g., "0.9" for
                        90% and "0.9001353" for 90.01353%) representing the
                        highest annual interest rate the admin is allowed to
                        set.

                        If unset (empty string), there is no upper limit.
                    periodStart:
                      type: string
                      format: int64
                      description: >-
                        The start time (in Unix seconds) of the current interest
                        accrual period.
                    periodTimeout:
                      type: string
                      format: int64
                      description: >-
                        The expire time (in Unix seconds) of the current
                        interest accrual period.
                    swapInEnabled:
                      type: boolean
                      description: >-
                        swap_in_enabled indicates whether users are allowed to
                        deposit into the vault.
                    swapOutEnabled:
                      type: boolean
                      description: >-
                        swap_out_enabled indicates whether users are allowed to
                        withdraw from the vault.
                    withdrawalDelaySeconds:
                      type: string
                      format: uint64
                      description: >-
                        withdrawal_delay_seconds is the configured time period
                        (in seconds) that a withdrawal

                        request must wait in the pending queue before being
                        processed.
                    paused:
                      type: boolean
                      description: >-
                        paused indicates that all user-facing swap-in and
                        swap-out operations are disabled.
                    pausedBalance:
                      description: >-
                        paused_balance is the total vault value snapshot taken
                        at the moment of pausing.

                        This value is used for all NAV calculations while the
                        vault is paused to prevent

                        apparent devaluation during collateral rebalancing. It
                        is cleared upon unpausing.
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                    pausedReason:
                      type: string
                      description: >-
                        paused_reason is a human-readable string explaining why
                        the vault was paused, particularly for automatic pauses.
                    bridgeAddress:
                      type: string
                      description: >-
                        bridge_address is the single external address allowed to
                        mint or burn shares on behalf

                        of this vault (e.g., for bridging to another chain). All
                        mint/burn must flow through the

                        vault keeper, which enforces that marker supply never
                        exceeds total_shares.
                    bridgeEnabled:
                      type: boolean
                      description: >-
                        bridge_enabled indicates whether the bridge
                        functionality is active. If false, the

                        bridge_address has no effect and cannot mint or burn.
                  description: >-
                    VaultAccount represents a central holding place for assets,
                    governed by a set of rules.

                    It is based on the ERC-4626 standard and builds upon the
                    Provenance Marker module.
                description: vaults is a list of all vaults.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  nextKey:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVaultsResponse is the response message for the Query/Vaults
              endpoint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.countTotal
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /vault/v1/vaults/{id}:
    get:
      summary: Vault returns the configuration and state of a specific vault.
      operationId: Vault
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vault:
                description: vault is the requested vault.
                type: object
                properties:
                  baseAccount:
                    description: >-
                      base_account cosmos account information including address
                      and coin holdings.
                    type: object
                    properties:
                      address:
                        type: string
                      pubKey:
                        type: object
                        properties:
                          '@type':
                            type: string
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com. As of May 2023, there are no
                              widely used type server

                              implementations and no plans to implement one.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                        additionalProperties: {}
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }
                              // or ...
                              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                                foo = any.unpack(Foo.getDefaultInstance());
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".


                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                      accountNumber:
                        type: string
                        format: uint64
                      sequence:
                        type: string
                        format: uint64
                  totalShares:
                    description: >-
                      total_shares is the total number of shares that have ever
                      been issued by the vault.

                      It serves as the canonical supply-of-record for all
                      shares, regardless of whether

                      they are held locally on Provenance or externally (e.g.,
                      bridged).
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  underlyingAsset:
                    type: string
                    description: >-
                      underlying_asset is the vault’s single principal
                      collateral AND valuation/base unit.

                      - Exactly one denom.

                      - Total Vault Value (TVV) and NAV-per-share are computed
                      and reported in this denom.

                      - Interest accrual and internal accounting are measured in
                      this denom.

                      - Any other coin accepted for I/O must have a NAV record
                      priced INTO this denom.
                  paymentDenom:
                    type: string
                    description: >-
                      payment_denom is the single optional external payment coin
                      supported for user I/O

                      alongside the underlying_asset.

                      - If unset, the vault operates single-denom:
                      deposits/withdrawals only in underlying_asset.

                      - If set, swap-in/out accept either underlying_asset OR
                      payment_denom (one denom per call).

                      - Must differ from share_denom and underlying_asset.

                      - Requires an on-chain NAV record mapping payment_denom ->
                      underlying_asset to value deposits
                        and redemptions.
                  admin:
                    type: string
                    description: >-
                      admin is the address that has administrative privileges
                      over the vault.
                  currentInterestRate:
                    type: string
                    description: >-
                      current_interest_rate is a decimal string (e.g., "0.9" for
                      90% and "0.9001353" for 90.01353%) representing the actual
                      annual interest rate currently being applied.

                      This may be adjusted programmatically (e.g., due to lack
                      of funds).
                  desiredInterestRate:
                    type: string
                    description: >-
                      desired_interest_rate is a decimal string (e.g., "0.9" for
                      90% and "0.9001353" for 90.01353%) representing the target
                      annual interest rate that the vault intends to apply.
                  minInterestRate:
                    type: string
                    description: >-
                      min_interest_rate is a decimal string (e.g., "0.9" for 90%
                      and "0.9001353" for 90.01353%) representing the lowest
                      annual interest rate the admin is allowed to set.

                      If unset (empty string), there is no lower limit.
                  maxInterestRate:
                    type: string
                    description: >-
                      max_interest_rate is a decimal string (e.g., "0.9" for 90%
                      and "0.9001353" for 90.01353%) representing the highest
                      annual interest rate the admin is allowed to set.

                      If unset (empty string), there is no upper limit.
                  periodStart:
                    type: string
                    format: int64
                    description: >-
                      The start time (in Unix seconds) of the current interest
                      accrual period.
                  periodTimeout:
                    type: string
                    format: int64
                    description: >-
                      The expire time (in Unix seconds) of the current interest
                      accrual period.
                  swapInEnabled:
                    type: boolean
                    description: >-
                      swap_in_enabled indicates whether users are allowed to
                      deposit into the vault.
                  swapOutEnabled:
                    type: boolean
                    description: >-
                      swap_out_enabled indicates whether users are allowed to
                      withdraw from the vault.
                  withdrawalDelaySeconds:
                    type: string
                    format: uint64
                    description: >-
                      withdrawal_delay_seconds is the configured time period (in
                      seconds) that a withdrawal

                      request must wait in the pending queue before being
                      processed.
                  paused:
                    type: boolean
                    description: >-
                      paused indicates that all user-facing swap-in and swap-out
                      operations are disabled.
                  pausedBalance:
                    description: >-
                      paused_balance is the total vault value snapshot taken at
                      the moment of pausing.

                      This value is used for all NAV calculations while the
                      vault is paused to prevent

                      apparent devaluation during collateral rebalancing. It is
                      cleared upon unpausing.
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                  pausedReason:
                    type: string
                    description: >-
                      paused_reason is a human-readable string explaining why
                      the vault was paused, particularly for automatic pauses.
                  bridgeAddress:
                    type: string
                    description: >-
                      bridge_address is the single external address allowed to
                      mint or burn shares on behalf

                      of this vault (e.g., for bridging to another chain). All
                      mint/burn must flow through the

                      vault keeper, which enforces that marker supply never
                      exceeds total_shares.
                  bridgeEnabled:
                    type: boolean
                    description: >-
                      bridge_enabled indicates whether the bridge functionality
                      is active. If false, the

                      bridge_address has no effect and cannot mint or burn.
              principal:
                description: >-
                  principal is the total amount of principal held in the vault's
                  marker.
                type: object
                properties:
                  address:
                    type: string
                    description: address is the account address.
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: coins is the balance of the account.
              reserves:
                description: >-
                  reserves is the total amount of reserves held in the vault
                  account for interest payments.
                type: object
                properties:
                  address:
                    type: string
                    description: address is the account address.
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: coins is the balance of the account.
            description: >-
              QueryVaultResponse is the response message for the Query/Vault
              endpoint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: id
          description: >-
            id is the bech32 address of the vault or the vault's share denom to
            query.
          in: path
          required: true
          type: string
      tags:
        - Query
  /vault/v1/vaults/{vaultAddress}/estimate_swap_in:
    get:
      summary: >-
        EstimateSwapIn estimates the amount of shares that would be received for
        a given amount of underlying assets.
      operationId: EstimateSwapIn
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              assets:
                description: >-
                  assets is the estimated amount of shares that would be
                  received.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
              height:
                type: string
                format: int64
                description: The block height when the estimate occurred.
              time:
                type: string
                format: date-time
                description: The UTC block time when the estimate occurred.
            description: >-
              QueryEstimateSwapInResponse is the response message for the
              Query/EstimateSwapIn endpoint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: vaultAddress
          description: vault_address is the bech32 address of the vault to query.
          in: path
          required: true
          type: string
        - name: assets.denom
          in: query
          required: false
          type: string
        - name: assets.amount
          in: query
          required: false
          type: string
      tags:
        - Query
  /vault/v1/vaults/{vaultAddress}/estimate_swap_out:
    get:
      summary: >-
        EstimateSwapOut estimates the amount of underlying assets that would be
        received for a given amount of shares.
      operationId: EstimateSwapOut
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              assets:
                description: >-
                  assets is the estimated amount of underlying assets that would
                  be received.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
              height:
                type: string
                format: int64
                description: The block height when the estimate occurred.
              time:
                type: string
                format: date-time
                description: The UTC block time when the estimate occurred.
            description: >-
              QueryEstimateSwapOutResponse is the response message for the
              Query/EstimateSwapOut endpoint.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: vaultAddress
          description: vault_address is the bech32 address of the vault to query.
          in: path
          required: true
          type: string
        - name: shares
          description: shares is the amount of shares to swap out.
          in: query
          required: false
          type: string
        - name: redeemDenom
          description: >-
            redeem_denom is the payout denom to estimate; if empty, the
            underlying asset is used.
          in: query
          required: false
          type: string
      tags:
        - Query
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com. As of May 2023, there are no widely used type
          server

          implementations and no plans to implement one.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
    additionalProperties: {}
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".


      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com. As of May 2023, there are no widely used
                type server

                implementations and no plans to implement one.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  v1AccountBalance:
    type: object
    properties:
      address:
        type: string
        description: address is the account address.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: coins is the balance of the account.
    description: AccountBalance represents the coin balance of a single account.
  v1PendingSwapOut:
    type: object
    properties:
      owner:
        type: string
        description: owner is the address initiating the swap out.
      vaultAddress:
        type: string
        description: vault_address is the address of the vault processing the withdrawal.
      shares:
        description: shares are the shares that were escrowed by the user.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      redeemDenom:
        type: string
        description: redeem_denom is the denomination of the asset to be redeemed.
    description: >-
      PendingSwapOut are swap outs that have not yet been processed and
      completed.
  v1PendingSwapOutWithTimeout:
    type: object
    properties:
      requestId:
        type: string
        format: uint64
        description: request_id is the unique identifier for the pending swap out request.
      pendingSwapOut:
        description: pending_swap_out contains the details of the swap out request.
        type: object
        properties:
          owner:
            type: string
            description: owner is the address initiating the swap out.
          vaultAddress:
            type: string
            description: >-
              vault_address is the address of the vault processing the
              withdrawal.
          shares:
            description: shares are the shares that were escrowed by the user.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          redeemDenom:
            type: string
            description: redeem_denom is the denomination of the asset to be redeemed.
      timeout:
        type: string
        format: date-time
        description: >-
          timeout is the time at which the pending swap out will expire if not
          processed.
    description: PendingSwapOutWithTimeout is a pending swap out with its timeout.
  v1QueryEstimateSwapInResponse:
    type: object
    properties:
      assets:
        description: assets is the estimated amount of shares that would be received.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      height:
        type: string
        format: int64
        description: The block height when the estimate occurred.
      time:
        type: string
        format: date-time
        description: The UTC block time when the estimate occurred.
    description: >-
      QueryEstimateSwapInResponse is the response message for the
      Query/EstimateSwapIn endpoint.
  v1QueryEstimateSwapOutResponse:
    type: object
    properties:
      assets:
        description: >-
          assets is the estimated amount of underlying assets that would be
          received.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      height:
        type: string
        format: int64
        description: The block height when the estimate occurred.
      time:
        type: string
        format: date-time
        description: The UTC block time when the estimate occurred.
    description: >-
      QueryEstimateSwapOutResponse is the response message for the
      Query/EstimateSwapOut endpoint.
  v1QueryPendingSwapOutsResponse:
    type: object
    properties:
      pendingSwapOuts:
        type: array
        items:
          type: object
          properties:
            requestId:
              type: string
              format: uint64
              description: >-
                request_id is the unique identifier for the pending swap out
                request.
            pendingSwapOut:
              description: pending_swap_out contains the details of the swap out request.
              type: object
              properties:
                owner:
                  type: string
                  description: owner is the address initiating the swap out.
                vaultAddress:
                  type: string
                  description: >-
                    vault_address is the address of the vault processing the
                    withdrawal.
                shares:
                  description: shares are the shares that were escrowed by the user.
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                redeemDenom:
                  type: string
                  description: >-
                    redeem_denom is the denomination of the asset to be
                    redeemed.
            timeout:
              type: string
              format: date-time
              description: >-
                timeout is the time at which the pending swap out will expire if
                not processed.
          description: PendingSwapOutWithTimeout is a pending swap out with its timeout.
        description: pending_swap_outs is a list of all pending swap outs.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          nextKey:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryPendingSwapOutsResponse is the response message for the
      Query/PendingSwapOuts endpoint.
  v1QueryVaultResponse:
    type: object
    properties:
      vault:
        description: vault is the requested vault.
        type: object
        properties:
          baseAccount:
            description: >-
              base_account cosmos account information including address and coin
              holdings.
            type: object
            properties:
              address:
                type: string
              pubKey:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com. As of May 2023, there are no widely
                      used type server

                      implementations and no plans to implement one.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              accountNumber:
                type: string
                format: uint64
              sequence:
                type: string
                format: uint64
          totalShares:
            description: >-
              total_shares is the total number of shares that have ever been
              issued by the vault.

              It serves as the canonical supply-of-record for all shares,
              regardless of whether

              they are held locally on Provenance or externally (e.g., bridged).
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          underlyingAsset:
            type: string
            description: >-
              underlying_asset is the vault’s single principal collateral AND
              valuation/base unit.

              - Exactly one denom.

              - Total Vault Value (TVV) and NAV-per-share are computed and
              reported in this denom.

              - Interest accrual and internal accounting are measured in this
              denom.

              - Any other coin accepted for I/O must have a NAV record priced
              INTO this denom.
          paymentDenom:
            type: string
            description: >-
              payment_denom is the single optional external payment coin
              supported for user I/O

              alongside the underlying_asset.

              - If unset, the vault operates single-denom: deposits/withdrawals
              only in underlying_asset.

              - If set, swap-in/out accept either underlying_asset OR
              payment_denom (one denom per call).

              - Must differ from share_denom and underlying_asset.

              - Requires an on-chain NAV record mapping payment_denom ->
              underlying_asset to value deposits
                and redemptions.
          admin:
            type: string
            description: >-
              admin is the address that has administrative privileges over the
              vault.
          currentInterestRate:
            type: string
            description: >-
              current_interest_rate is a decimal string (e.g., "0.9" for 90% and
              "0.9001353" for 90.01353%) representing the actual annual interest
              rate currently being applied.

              This may be adjusted programmatically (e.g., due to lack of
              funds).
          desiredInterestRate:
            type: string
            description: >-
              desired_interest_rate is a decimal string (e.g., "0.9" for 90% and
              "0.9001353" for 90.01353%) representing the target annual interest
              rate that the vault intends to apply.
          minInterestRate:
            type: string
            description: >-
              min_interest_rate is a decimal string (e.g., "0.9" for 90% and
              "0.9001353" for 90.01353%) representing the lowest annual interest
              rate the admin is allowed to set.

              If unset (empty string), there is no lower limit.
          maxInterestRate:
            type: string
            description: >-
              max_interest_rate is a decimal string (e.g., "0.9" for 90% and
              "0.9001353" for 90.01353%) representing the highest annual
              interest rate the admin is allowed to set.

              If unset (empty string), there is no upper limit.
          periodStart:
            type: string
            format: int64
            description: >-
              The start time (in Unix seconds) of the current interest accrual
              period.
          periodTimeout:
            type: string
            format: int64
            description: >-
              The expire time (in Unix seconds) of the current interest accrual
              period.
          swapInEnabled:
            type: boolean
            description: >-
              swap_in_enabled indicates whether users are allowed to deposit
              into the vault.
          swapOutEnabled:
            type: boolean
            description: >-
              swap_out_enabled indicates whether users are allowed to withdraw
              from the vault.
          withdrawalDelaySeconds:
            type: string
            format: uint64
            description: >-
              withdrawal_delay_seconds is the configured time period (in
              seconds) that a withdrawal

              request must wait in the pending queue before being processed.
          paused:
            type: boolean
            description: >-
              paused indicates that all user-facing swap-in and swap-out
              operations are disabled.
          pausedBalance:
            description: >-
              paused_balance is the total vault value snapshot taken at the
              moment of pausing.

              This value is used for all NAV calculations while the vault is
              paused to prevent

              apparent devaluation during collateral rebalancing. It is cleared
              upon unpausing.
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
          pausedReason:
            type: string
            description: >-
              paused_reason is a human-readable string explaining why the vault
              was paused, particularly for automatic pauses.
          bridgeAddress:
            type: string
            description: >-
              bridge_address is the single external address allowed to mint or
              burn shares on behalf

              of this vault (e.g., for bridging to another chain). All mint/burn
              must flow through the

              vault keeper, which enforces that marker supply never exceeds
              total_shares.
          bridgeEnabled:
            type: boolean
            description: >-
              bridge_enabled indicates whether the bridge functionality is
              active. If false, the

              bridge_address has no effect and cannot mint or burn.
      principal:
        description: principal is the total amount of principal held in the vault's marker.
        type: object
        properties:
          address:
            type: string
            description: address is the account address.
          coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: coins is the balance of the account.
      reserves:
        description: >-
          reserves is the total amount of reserves held in the vault account for
          interest payments.
        type: object
        properties:
          address:
            type: string
            description: address is the account address.
          coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: coins is the balance of the account.
    description: QueryVaultResponse is the response message for the Query/Vault endpoint.
  v1QueryVaultsResponse:
    type: object
    properties:
      vaults:
        type: array
        items:
          type: object
          properties:
            baseAccount:
              description: >-
                base_account cosmos account information including address and
                coin holdings.
              type: object
              properties:
                address:
                  type: string
                pubKey:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com. As of May 2023, there are no widely
                        used type server

                        implementations and no plans to implement one.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                accountNumber:
                  type: string
                  format: uint64
                sequence:
                  type: string
                  format: uint64
            totalShares:
              description: >-
                total_shares is the total number of shares that have ever been
                issued by the vault.

                It serves as the canonical supply-of-record for all shares,
                regardless of whether

                they are held locally on Provenance or externally (e.g.,
                bridged).
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            underlyingAsset:
              type: string
              description: >-
                underlying_asset is the vault’s single principal collateral AND
                valuation/base unit.

                - Exactly one denom.

                - Total Vault Value (TVV) and NAV-per-share are computed and
                reported in this denom.

                - Interest accrual and internal accounting are measured in this
                denom.

                - Any other coin accepted for I/O must have a NAV record priced
                INTO this denom.
            paymentDenom:
              type: string
              description: >-
                payment_denom is the single optional external payment coin
                supported for user I/O

                alongside the underlying_asset.

                - If unset, the vault operates single-denom:
                deposits/withdrawals only in underlying_asset.

                - If set, swap-in/out accept either underlying_asset OR
                payment_denom (one denom per call).

                - Must differ from share_denom and underlying_asset.

                - Requires an on-chain NAV record mapping payment_denom ->
                underlying_asset to value deposits
                  and redemptions.
            admin:
              type: string
              description: >-
                admin is the address that has administrative privileges over the
                vault.
            currentInterestRate:
              type: string
              description: >-
                current_interest_rate is a decimal string (e.g., "0.9" for 90%
                and "0.9001353" for 90.01353%) representing the actual annual
                interest rate currently being applied.

                This may be adjusted programmatically (e.g., due to lack of
                funds).
            desiredInterestRate:
              type: string
              description: >-
                desired_interest_rate is a decimal string (e.g., "0.9" for 90%
                and "0.9001353" for 90.01353%) representing the target annual
                interest rate that the vault intends to apply.
            minInterestRate:
              type: string
              description: >-
                min_interest_rate is a decimal string (e.g., "0.9" for 90% and
                "0.9001353" for 90.01353%) representing the lowest annual
                interest rate the admin is allowed to set.

                If unset (empty string), there is no lower limit.
            maxInterestRate:
              type: string
              description: >-
                max_interest_rate is a decimal string (e.g., "0.9" for 90% and
                "0.9001353" for 90.01353%) representing the highest annual
                interest rate the admin is allowed to set.

                If unset (empty string), there is no upper limit.
            periodStart:
              type: string
              format: int64
              description: >-
                The start time (in Unix seconds) of the current interest accrual
                period.
            periodTimeout:
              type: string
              format: int64
              description: >-
                The expire time (in Unix seconds) of the current interest
                accrual period.
            swapInEnabled:
              type: boolean
              description: >-
                swap_in_enabled indicates whether users are allowed to deposit
                into the vault.
            swapOutEnabled:
              type: boolean
              description: >-
                swap_out_enabled indicates whether users are allowed to withdraw
                from the vault.
            withdrawalDelaySeconds:
              type: string
              format: uint64
              description: >-
                withdrawal_delay_seconds is the configured time period (in
                seconds) that a withdrawal

                request must wait in the pending queue before being processed.
            paused:
              type: boolean
              description: >-
                paused indicates that all user-facing swap-in and swap-out
                operations are disabled.
            pausedBalance:
              description: >-
                paused_balance is the total vault value snapshot taken at the
                moment of pausing.

                This value is used for all NAV calculations while the vault is
                paused to prevent

                apparent devaluation during collateral rebalancing. It is
                cleared upon unpausing.
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
            pausedReason:
              type: string
              description: >-
                paused_reason is a human-readable string explaining why the
                vault was paused, particularly for automatic pauses.
            bridgeAddress:
              type: string
              description: >-
                bridge_address is the single external address allowed to mint or
                burn shares on behalf

                of this vault (e.g., for bridging to another chain). All
                mint/burn must flow through the

                vault keeper, which enforces that marker supply never exceeds
                total_shares.
            bridgeEnabled:
              type: boolean
              description: >-
                bridge_enabled indicates whether the bridge functionality is
                active. If false, the

                bridge_address has no effect and cannot mint or burn.
          description: >-
            VaultAccount represents a central holding place for assets, governed
            by a set of rules.

            It is based on the ERC-4626 standard and builds upon the Provenance
            Marker module.
        description: vaults is a list of all vaults.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          nextKey:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVaultsResponse is the response message for the Query/Vaults endpoint.
  v1VaultAccount:
    type: object
    properties:
      baseAccount:
        description: >-
          base_account cosmos account information including address and coin
          holdings.
        type: object
        properties:
          address:
            type: string
          pubKey:
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com. As of May 2023, there are no widely used
                  type server

                  implementations and no plans to implement one.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }
                  // or ...
                  if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                    foo = any.unpack(Foo.getDefaultInstance());
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".


              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          accountNumber:
            type: string
            format: uint64
          sequence:
            type: string
            format: uint64
      totalShares:
        description: >-
          total_shares is the total number of shares that have ever been issued
          by the vault.

          It serves as the canonical supply-of-record for all shares, regardless
          of whether

          they are held locally on Provenance or externally (e.g., bridged).
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      underlyingAsset:
        type: string
        description: >-
          underlying_asset is the vault’s single principal collateral AND
          valuation/base unit.

          - Exactly one denom.

          - Total Vault Value (TVV) and NAV-per-share are computed and reported
          in this denom.

          - Interest accrual and internal accounting are measured in this denom.

          - Any other coin accepted for I/O must have a NAV record priced INTO
          this denom.
      paymentDenom:
        type: string
        description: >-
          payment_denom is the single optional external payment coin supported
          for user I/O

          alongside the underlying_asset.

          - If unset, the vault operates single-denom: deposits/withdrawals only
          in underlying_asset.

          - If set, swap-in/out accept either underlying_asset OR payment_denom
          (one denom per call).

          - Must differ from share_denom and underlying_asset.

          - Requires an on-chain NAV record mapping payment_denom ->
          underlying_asset to value deposits
            and redemptions.
      admin:
        type: string
        description: >-
          admin is the address that has administrative privileges over the
          vault.
      currentInterestRate:
        type: string
        description: >-
          current_interest_rate is a decimal string (e.g., "0.9" for 90% and
          "0.9001353" for 90.01353%) representing the actual annual interest
          rate currently being applied.

          This may be adjusted programmatically (e.g., due to lack of funds).
      desiredInterestRate:
        type: string
        description: >-
          desired_interest_rate is a decimal string (e.g., "0.9" for 90% and
          "0.9001353" for 90.01353%) representing the target annual interest
          rate that the vault intends to apply.
      minInterestRate:
        type: string
        description: >-
          min_interest_rate is a decimal string (e.g., "0.9" for 90% and
          "0.9001353" for 90.01353%) representing the lowest annual interest
          rate the admin is allowed to set.

          If unset (empty string), there is no lower limit.
      maxInterestRate:
        type: string
        description: >-
          max_interest_rate is a decimal string (e.g., "0.9" for 90% and
          "0.9001353" for 90.01353%) representing the highest annual interest
          rate the admin is allowed to set.

          If unset (empty string), there is no upper limit.
      periodStart:
        type: string
        format: int64
        description: >-
          The start time (in Unix seconds) of the current interest accrual
          period.
      periodTimeout:
        type: string
        format: int64
        description: >-
          The expire time (in Unix seconds) of the current interest accrual
          period.
      swapInEnabled:
        type: boolean
        description: >-
          swap_in_enabled indicates whether users are allowed to deposit into
          the vault.
      swapOutEnabled:
        type: boolean
        description: >-
          swap_out_enabled indicates whether users are allowed to withdraw from
          the vault.
      withdrawalDelaySeconds:
        type: string
        format: uint64
        description: >-
          withdrawal_delay_seconds is the configured time period (in seconds)
          that a withdrawal

          request must wait in the pending queue before being processed.
      paused:
        type: boolean
        description: >-
          paused indicates that all user-facing swap-in and swap-out operations
          are disabled.
      pausedBalance:
        description: >-
          paused_balance is the total vault value snapshot taken at the moment
          of pausing.

          This value is used for all NAV calculations while the vault is paused
          to prevent

          apparent devaluation during collateral rebalancing. It is cleared upon
          unpausing.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
      pausedReason:
        type: string
        description: >-
          paused_reason is a human-readable string explaining why the vault was
          paused, particularly for automatic pauses.
      bridgeAddress:
        type: string
        description: >-
          bridge_address is the single external address allowed to mint or burn
          shares on behalf

          of this vault (e.g., for bridging to another chain). All mint/burn
          must flow through the

          vault keeper, which enforces that marker supply never exceeds
          total_shares.
      bridgeEnabled:
        type: boolean
        description: >-
          bridge_enabled indicates whether the bridge functionality is active.
          If false, the

          bridge_address has no effect and cannot mint or burn.
    description: >-
      VaultAccount represents a central holding place for assets, governed by a
      set of rules.

      It is based on the ERC-4626 standard and builds upon the Provenance Marker
      module.
  v1beta1BaseAccount:
    type: object
    properties:
      address:
        type: string
      pubKey:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com. As of May 2023, there are no widely used type
              server

              implementations and no plans to implement one.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      accountNumber:
        type: string
        format: uint64
      sequence:
        type: string
        format: uint64
    description: >-
      BaseAccount defines a base account type. It contains all the necessary
      fields

      for basic account functionality. Any custom account type should extend
      this

      type for additional functionality (e.g. vesting).
  v1beta1Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  v1beta1PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      countTotal:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  v1beta1PageResponse:
    type: object
    properties:
      nextKey:
        type: string
        format: byte
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
