// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provlabs/vault/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateVaultRequest is the request message for the CreateVault endpoint.
type MsgCreateVaultRequest struct {
	// admin is the creator and initial administrator of the vault.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// share_denom is the name of the assets created by the vault used for distribution.
	ShareDenom string `protobuf:"bytes,2,opt,name=share_denom,json=shareDenom,proto3" json:"share_denom,omitempty"`
	// underlying_asset is the denomination of the asset supported by the vault.
	UnderlyingAsset string `protobuf:"bytes,3,opt,name=underlying_asset,json=underlyingAsset,proto3" json:"underlying_asset,omitempty"`
	// payment_denom is an optional secondary denomination the vault can accept.
	PaymentDenom string `protobuf:"bytes,4,opt,name=payment_denom,json=paymentDenom,proto3" json:"payment_denom,omitempty"`
	// withdrawal_delay_seconds is the time period (in seconds) that a withdrawal
	// must wait in the pending queue before being processed.
	WithdrawalDelaySeconds uint64 `protobuf:"varint,5,opt,name=withdrawal_delay_seconds,json=withdrawalDelaySeconds,proto3" json:"withdrawal_delay_seconds,omitempty"`
}

func (m *MsgCreateVaultRequest) Reset()         { *m = MsgCreateVaultRequest{} }
func (m *MsgCreateVaultRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVaultRequest) ProtoMessage()    {}
func (*MsgCreateVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{0}
}
func (m *MsgCreateVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVaultRequest.Merge(m, src)
}
func (m *MsgCreateVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVaultRequest proto.InternalMessageInfo

func (m *MsgCreateVaultRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgCreateVaultRequest) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

func (m *MsgCreateVaultRequest) GetUnderlyingAsset() string {
	if m != nil {
		return m.UnderlyingAsset
	}
	return ""
}

func (m *MsgCreateVaultRequest) GetPaymentDenom() string {
	if m != nil {
		return m.PaymentDenom
	}
	return ""
}

func (m *MsgCreateVaultRequest) GetWithdrawalDelaySeconds() uint64 {
	if m != nil {
		return m.WithdrawalDelaySeconds
	}
	return 0
}

// MsgCreateVaultResponse is the response message for the CreateVault endpoint.
type MsgCreateVaultResponse struct {
	// vault_address is the bech32 address of the newly created vault.
	VaultAddress string `protobuf:"bytes,1,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
}

func (m *MsgCreateVaultResponse) Reset()         { *m = MsgCreateVaultResponse{} }
func (m *MsgCreateVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVaultResponse) ProtoMessage()    {}
func (*MsgCreateVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{1}
}
func (m *MsgCreateVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVaultResponse.Merge(m, src)
}
func (m *MsgCreateVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVaultResponse proto.InternalMessageInfo

func (m *MsgCreateVaultResponse) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

// MsgSetShareDenomMetadataRequest defines the request to set bank denom metadata for a vault's share denom.
// The target denom is derived from the vault identified by vault_address.
type MsgSetShareDenomMetadataRequest struct {
	// metadata is the bank module Metadata to assign to the vault's share denom.
	Metadata github_com_cosmos_cosmos_sdk_x_bank_types.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,customtype=github.com/cosmos/cosmos-sdk/x/bank/types.Metadata" json:"metadata"`
	// admin is the address of the vault administrator authorizing this update.
	Admin string `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault whose share denom metadata is being set.
	VaultAddress string `protobuf:"bytes,3,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
}

func (m *MsgSetShareDenomMetadataRequest) Reset()         { *m = MsgSetShareDenomMetadataRequest{} }
func (m *MsgSetShareDenomMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetShareDenomMetadataRequest) ProtoMessage()    {}
func (*MsgSetShareDenomMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{2}
}
func (m *MsgSetShareDenomMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetShareDenomMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetShareDenomMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetShareDenomMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetShareDenomMetadataRequest.Merge(m, src)
}
func (m *MsgSetShareDenomMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetShareDenomMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetShareDenomMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetShareDenomMetadataRequest proto.InternalMessageInfo

func (m *MsgSetShareDenomMetadataRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetShareDenomMetadataRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

// MsgSetShareDenomMetadataResponse defines the response for setting a vault's share denom metadata.
type MsgSetShareDenomMetadataResponse struct {
}

func (m *MsgSetShareDenomMetadataResponse) Reset()         { *m = MsgSetShareDenomMetadataResponse{} }
func (m *MsgSetShareDenomMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetShareDenomMetadataResponse) ProtoMessage()    {}
func (*MsgSetShareDenomMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{3}
}
func (m *MsgSetShareDenomMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetShareDenomMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetShareDenomMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetShareDenomMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetShareDenomMetadataResponse.Merge(m, src)
}
func (m *MsgSetShareDenomMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetShareDenomMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetShareDenomMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetShareDenomMetadataResponse proto.InternalMessageInfo

// MsgSwapInRequest is the request message for depositing underlying assets into a vault in exchange for shares.
type MsgSwapInRequest struct {
	// owner is the address initiating the swap in (deposit).
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// vault_address is the address of the target vault.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// assets is the amount of underlying assets to deposit.
	Assets types1.Coin `protobuf:"bytes,3,opt,name=assets,proto3" json:"assets"`
}

func (m *MsgSwapInRequest) Reset()         { *m = MsgSwapInRequest{} }
func (m *MsgSwapInRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSwapInRequest) ProtoMessage()    {}
func (*MsgSwapInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{4}
}
func (m *MsgSwapInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapInRequest.Merge(m, src)
}
func (m *MsgSwapInRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapInRequest proto.InternalMessageInfo

func (m *MsgSwapInRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSwapInRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgSwapInRequest) GetAssets() types1.Coin {
	if m != nil {
		return m.Assets
	}
	return types1.Coin{}
}

// MsgSwapInResponse is the response message for a successful SwapIn.
type MsgSwapInResponse struct {
	// shares_received is the amount of vault shares minted to the depositor.
	SharesReceived types1.Coin `protobuf:"bytes,1,opt,name=shares_received,json=sharesReceived,proto3" json:"shares_received"`
}

func (m *MsgSwapInResponse) Reset()         { *m = MsgSwapInResponse{} }
func (m *MsgSwapInResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapInResponse) ProtoMessage()    {}
func (*MsgSwapInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{5}
}
func (m *MsgSwapInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapInResponse.Merge(m, src)
}
func (m *MsgSwapInResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapInResponse proto.InternalMessageInfo

func (m *MsgSwapInResponse) GetSharesReceived() types1.Coin {
	if m != nil {
		return m.SharesReceived
	}
	return types1.Coin{}
}

// MsgSwapOutRequest is the request message for redeeming vault shares in exchange for underlying assets.
type MsgSwapOutRequest struct {
	// owner is the address initiating the swap out (withdraw).
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// vault_address is the address of the vault to redeem from.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// assets is the amount of underlying assets to withdraw.
	Assets types1.Coin `protobuf:"bytes,3,opt,name=assets,proto3" json:"assets"`
	// redeem_denom selects the payout coin.
	// - If empty, defaults to the vault’s underlying_asset.
	// - Must be either the vault’s underlying_asset or its payment_denom.
	RedeemDenom string `protobuf:"bytes,4,opt,name=redeem_denom,json=redeemDenom,proto3" json:"redeem_denom,omitempty"`
}

func (m *MsgSwapOutRequest) Reset()         { *m = MsgSwapOutRequest{} }
func (m *MsgSwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSwapOutRequest) ProtoMessage()    {}
func (*MsgSwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{6}
}
func (m *MsgSwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapOutRequest.Merge(m, src)
}
func (m *MsgSwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapOutRequest proto.InternalMessageInfo

func (m *MsgSwapOutRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgSwapOutRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgSwapOutRequest) GetAssets() types1.Coin {
	if m != nil {
		return m.Assets
	}
	return types1.Coin{}
}

func (m *MsgSwapOutRequest) GetRedeemDenom() string {
	if m != nil {
		return m.RedeemDenom
	}
	return ""
}

// MsgSwapOutResponse is the response message for the SwapOut endpoint.
type MsgSwapOutResponse struct {
	// request_id is the unique identifier for the newly queued swap out request.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgSwapOutResponse) Reset()         { *m = MsgSwapOutResponse{} }
func (m *MsgSwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapOutResponse) ProtoMessage()    {}
func (*MsgSwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{7}
}
func (m *MsgSwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapOutResponse.Merge(m, src)
}
func (m *MsgSwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapOutResponse proto.InternalMessageInfo

func (m *MsgSwapOutResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// MsgUpdateMinInterestRateRequest is the request message for updating the minimum interest rate of a vault.
type MsgUpdateMinInterestRateRequest struct {
	// The address of the account authorized to update the minimum interest rate for the vault.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// The bech32 address of the vault whose minimum interest rate is being updated.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// min_rate is the minimum allowable interest rate(APY) for the vault as a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%).
	// An empty string "" represents no minimum.
	MinRate string `protobuf:"bytes,3,opt,name=min_rate,json=minRate,proto3" json:"min_rate,omitempty"`
}

func (m *MsgUpdateMinInterestRateRequest) Reset()         { *m = MsgUpdateMinInterestRateRequest{} }
func (m *MsgUpdateMinInterestRateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMinInterestRateRequest) ProtoMessage()    {}
func (*MsgUpdateMinInterestRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{8}
}
func (m *MsgUpdateMinInterestRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMinInterestRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMinInterestRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMinInterestRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMinInterestRateRequest.Merge(m, src)
}
func (m *MsgUpdateMinInterestRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMinInterestRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMinInterestRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMinInterestRateRequest proto.InternalMessageInfo

func (m *MsgUpdateMinInterestRateRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateMinInterestRateRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgUpdateMinInterestRateRequest) GetMinRate() string {
	if m != nil {
		return m.MinRate
	}
	return ""
}

// MsgUpdateMinInterestRateResponse is the response message for the UpdateMinInterestRate endpoint.
type MsgUpdateMinInterestRateResponse struct {
}

func (m *MsgUpdateMinInterestRateResponse) Reset()         { *m = MsgUpdateMinInterestRateResponse{} }
func (m *MsgUpdateMinInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMinInterestRateResponse) ProtoMessage()    {}
func (*MsgUpdateMinInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{9}
}
func (m *MsgUpdateMinInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMinInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMinInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMinInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMinInterestRateResponse.Merge(m, src)
}
func (m *MsgUpdateMinInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMinInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMinInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMinInterestRateResponse proto.InternalMessageInfo

// MsgUpdateMaxInterestRateRequest is the request message for updating the maximum interest rate of a vault.
type MsgUpdateMaxInterestRateRequest struct {
	// The address of the account authorized to update the maximum interest rate for the vault.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// The bech32 address of the vault whose maximum interest rate is being updated.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// max_rate is the maximum allowable annual interest rate for the vault as a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%).
	// An empty string "" represents no maximum.
	MaxRate string `protobuf:"bytes,3,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
}

func (m *MsgUpdateMaxInterestRateRequest) Reset()         { *m = MsgUpdateMaxInterestRateRequest{} }
func (m *MsgUpdateMaxInterestRateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxInterestRateRequest) ProtoMessage()    {}
func (*MsgUpdateMaxInterestRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{10}
}
func (m *MsgUpdateMaxInterestRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxInterestRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxInterestRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxInterestRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxInterestRateRequest.Merge(m, src)
}
func (m *MsgUpdateMaxInterestRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxInterestRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxInterestRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxInterestRateRequest proto.InternalMessageInfo

func (m *MsgUpdateMaxInterestRateRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateMaxInterestRateRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgUpdateMaxInterestRateRequest) GetMaxRate() string {
	if m != nil {
		return m.MaxRate
	}
	return ""
}

// MsgUpdateMaxInterestRateResponse is the response message for the UpdateMaxInterestRate endpoint.
type MsgUpdateMaxInterestRateResponse struct {
}

func (m *MsgUpdateMaxInterestRateResponse) Reset()         { *m = MsgUpdateMaxInterestRateResponse{} }
func (m *MsgUpdateMaxInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxInterestRateResponse) ProtoMessage()    {}
func (*MsgUpdateMaxInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{11}
}
func (m *MsgUpdateMaxInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxInterestRateResponse.Merge(m, src)
}
func (m *MsgUpdateMaxInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxInterestRateResponse proto.InternalMessageInfo

// MsgUpdateInterestRateRequest is the request message for updating the annual interest rate of a vault.
type MsgUpdateInterestRateRequest struct {
	// admin is the address of the vault administrator.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// new_rate is the new annual interest rate for the the vault as a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%).
	NewRate string `protobuf:"bytes,3,opt,name=new_rate,json=newRate,proto3" json:"new_rate,omitempty"`
}

func (m *MsgUpdateInterestRateRequest) Reset()         { *m = MsgUpdateInterestRateRequest{} }
func (m *MsgUpdateInterestRateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInterestRateRequest) ProtoMessage()    {}
func (*MsgUpdateInterestRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{12}
}
func (m *MsgUpdateInterestRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInterestRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInterestRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInterestRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInterestRateRequest.Merge(m, src)
}
func (m *MsgUpdateInterestRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInterestRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInterestRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInterestRateRequest proto.InternalMessageInfo

func (m *MsgUpdateInterestRateRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateInterestRateRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgUpdateInterestRateRequest) GetNewRate() string {
	if m != nil {
		return m.NewRate
	}
	return ""
}

// MsgUpdateInterestRateResponse is the response message for the UpdateInterestRate endpoint.
type MsgUpdateInterestRateResponse struct {
}

func (m *MsgUpdateInterestRateResponse) Reset()         { *m = MsgUpdateInterestRateResponse{} }
func (m *MsgUpdateInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInterestRateResponse) ProtoMessage()    {}
func (*MsgUpdateInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{13}
}
func (m *MsgUpdateInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInterestRateResponse.Merge(m, src)
}
func (m *MsgUpdateInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInterestRateResponse proto.InternalMessageInfo

// MsgToggleSwapInRequest is the request message for enabling or disabling swap-in operations for a vault.
type MsgToggleSwapInRequest struct {
	// admin is the address of the vault administrator.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// enabled specifies whether swap-in operations should be enabled (true) or disabled (false).
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgToggleSwapInRequest) Reset()         { *m = MsgToggleSwapInRequest{} }
func (m *MsgToggleSwapInRequest) String() string { return proto.CompactTextString(m) }
func (*MsgToggleSwapInRequest) ProtoMessage()    {}
func (*MsgToggleSwapInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{14}
}
func (m *MsgToggleSwapInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleSwapInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleSwapInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleSwapInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleSwapInRequest.Merge(m, src)
}
func (m *MsgToggleSwapInRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleSwapInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleSwapInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleSwapInRequest proto.InternalMessageInfo

func (m *MsgToggleSwapInRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgToggleSwapInRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgToggleSwapInRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// MsgToggleSwapInResponse is the response message for the ToggleSwapIn endpoint.
type MsgToggleSwapInResponse struct {
}

func (m *MsgToggleSwapInResponse) Reset()         { *m = MsgToggleSwapInResponse{} }
func (m *MsgToggleSwapInResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleSwapInResponse) ProtoMessage()    {}
func (*MsgToggleSwapInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{15}
}
func (m *MsgToggleSwapInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleSwapInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleSwapInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleSwapInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleSwapInResponse.Merge(m, src)
}
func (m *MsgToggleSwapInResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleSwapInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleSwapInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleSwapInResponse proto.InternalMessageInfo

// MsgToggleSwapOutRequest is the request message for enabling or disabling swap-out operations for a vault.
type MsgToggleSwapOutRequest struct {
	// admin is the address of the vault administrator.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// enabled specifies whether swap-out operations should be enabled (true) or disabled (false).
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgToggleSwapOutRequest) Reset()         { *m = MsgToggleSwapOutRequest{} }
func (m *MsgToggleSwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*MsgToggleSwapOutRequest) ProtoMessage()    {}
func (*MsgToggleSwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{16}
}
func (m *MsgToggleSwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleSwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleSwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleSwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleSwapOutRequest.Merge(m, src)
}
func (m *MsgToggleSwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleSwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleSwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleSwapOutRequest proto.InternalMessageInfo

func (m *MsgToggleSwapOutRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgToggleSwapOutRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgToggleSwapOutRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// MsgToggleSwapOutResponse is the response message for the ToggleSwapOut endpoint.
type MsgToggleSwapOutResponse struct {
}

func (m *MsgToggleSwapOutResponse) Reset()         { *m = MsgToggleSwapOutResponse{} }
func (m *MsgToggleSwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleSwapOutResponse) ProtoMessage()    {}
func (*MsgToggleSwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{17}
}
func (m *MsgToggleSwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleSwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleSwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleSwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleSwapOutResponse.Merge(m, src)
}
func (m *MsgToggleSwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleSwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleSwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleSwapOutResponse proto.InternalMessageInfo

// MsgDepositInterestFundsRequest is the request message for depositing funds to be used for paying interest.
type MsgDepositInterestFundsRequest struct {
	// admin is the address of the account depositing the funds.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to which funds are being deposited.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// amount is the amount of funds to deposit.
	Amount types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositInterestFundsRequest) Reset()         { *m = MsgDepositInterestFundsRequest{} }
func (m *MsgDepositInterestFundsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDepositInterestFundsRequest) ProtoMessage()    {}
func (*MsgDepositInterestFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{18}
}
func (m *MsgDepositInterestFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositInterestFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositInterestFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositInterestFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositInterestFundsRequest.Merge(m, src)
}
func (m *MsgDepositInterestFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositInterestFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositInterestFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositInterestFundsRequest proto.InternalMessageInfo

func (m *MsgDepositInterestFundsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgDepositInterestFundsRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgDepositInterestFundsRequest) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// MsgDepositInterestFundsResponse is the response message for the DepositInterestFunds endpoint.
type MsgDepositInterestFundsResponse struct {
}

func (m *MsgDepositInterestFundsResponse) Reset()         { *m = MsgDepositInterestFundsResponse{} }
func (m *MsgDepositInterestFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositInterestFundsResponse) ProtoMessage()    {}
func (*MsgDepositInterestFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{19}
}
func (m *MsgDepositInterestFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositInterestFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositInterestFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositInterestFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositInterestFundsResponse.Merge(m, src)
}
func (m *MsgDepositInterestFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositInterestFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositInterestFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositInterestFundsResponse proto.InternalMessageInfo

// MsgWithdrawInterestFundsRequest is the request message for withdrawing unused interest funds.
type MsgWithdrawInterestFundsRequest struct {
	// admin is the address of the vault administrator initiating the withdrawal.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault from which funds are being withdrawn.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// amount is the amount of funds to withdraw.
	Amount types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawInterestFundsRequest) Reset()         { *m = MsgWithdrawInterestFundsRequest{} }
func (m *MsgWithdrawInterestFundsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawInterestFundsRequest) ProtoMessage()    {}
func (*MsgWithdrawInterestFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{20}
}
func (m *MsgWithdrawInterestFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawInterestFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawInterestFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawInterestFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawInterestFundsRequest.Merge(m, src)
}
func (m *MsgWithdrawInterestFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawInterestFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawInterestFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawInterestFundsRequest proto.InternalMessageInfo

func (m *MsgWithdrawInterestFundsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgWithdrawInterestFundsRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgWithdrawInterestFundsRequest) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// MsgWithdrawInterestFundsResponse is the response message for the WithdrawInterestFunds endpoint.
type MsgWithdrawInterestFundsResponse struct {
}

func (m *MsgWithdrawInterestFundsResponse) Reset()         { *m = MsgWithdrawInterestFundsResponse{} }
func (m *MsgWithdrawInterestFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawInterestFundsResponse) ProtoMessage()    {}
func (*MsgWithdrawInterestFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{21}
}
func (m *MsgWithdrawInterestFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawInterestFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawInterestFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawInterestFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawInterestFundsResponse.Merge(m, src)
}
func (m *MsgWithdrawInterestFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawInterestFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawInterestFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawInterestFundsResponse proto.InternalMessageInfo

// MsgDepositPrincipalFundsRequest is the request message for depositing principal funds into a vault.
type MsgDepositPrincipalFundsRequest struct {
	// admin is the address of the account depositing the funds.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to which funds are being deposited.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// amount is the amount of funds to deposit.
	Amount types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositPrincipalFundsRequest) Reset()         { *m = MsgDepositPrincipalFundsRequest{} }
func (m *MsgDepositPrincipalFundsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDepositPrincipalFundsRequest) ProtoMessage()    {}
func (*MsgDepositPrincipalFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{22}
}
func (m *MsgDepositPrincipalFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositPrincipalFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositPrincipalFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositPrincipalFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositPrincipalFundsRequest.Merge(m, src)
}
func (m *MsgDepositPrincipalFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositPrincipalFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositPrincipalFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositPrincipalFundsRequest proto.InternalMessageInfo

func (m *MsgDepositPrincipalFundsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgDepositPrincipalFundsRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgDepositPrincipalFundsRequest) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// MsgDepositPrincipalFundsResponse is the response message for the DepositPrincipalFunds endpoint.
type MsgDepositPrincipalFundsResponse struct {
}

func (m *MsgDepositPrincipalFundsResponse) Reset()         { *m = MsgDepositPrincipalFundsResponse{} }
func (m *MsgDepositPrincipalFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositPrincipalFundsResponse) ProtoMessage()    {}
func (*MsgDepositPrincipalFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{23}
}
func (m *MsgDepositPrincipalFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositPrincipalFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositPrincipalFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositPrincipalFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositPrincipalFundsResponse.Merge(m, src)
}
func (m *MsgDepositPrincipalFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositPrincipalFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositPrincipalFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositPrincipalFundsResponse proto.InternalMessageInfo

// MsgWithdrawPrincipalFundsRequest is the request message for withdrawing principal funds from a vault.
type MsgWithdrawPrincipalFundsRequest struct {
	// admin is the address of the vault administrator initiating the withdrawal.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault from which funds are being withdrawn.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// amount is the amount of funds to withdraw.
	Amount types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawPrincipalFundsRequest) Reset()         { *m = MsgWithdrawPrincipalFundsRequest{} }
func (m *MsgWithdrawPrincipalFundsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawPrincipalFundsRequest) ProtoMessage()    {}
func (*MsgWithdrawPrincipalFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{24}
}
func (m *MsgWithdrawPrincipalFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawPrincipalFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawPrincipalFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawPrincipalFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawPrincipalFundsRequest.Merge(m, src)
}
func (m *MsgWithdrawPrincipalFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawPrincipalFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawPrincipalFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawPrincipalFundsRequest proto.InternalMessageInfo

func (m *MsgWithdrawPrincipalFundsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgWithdrawPrincipalFundsRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgWithdrawPrincipalFundsRequest) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

// MsgWithdrawPrincipalFundsResponse is the response message for the WithdrawPrincipalFunds endpoint.
type MsgWithdrawPrincipalFundsResponse struct {
}

func (m *MsgWithdrawPrincipalFundsResponse) Reset()         { *m = MsgWithdrawPrincipalFundsResponse{} }
func (m *MsgWithdrawPrincipalFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawPrincipalFundsResponse) ProtoMessage()    {}
func (*MsgWithdrawPrincipalFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{25}
}
func (m *MsgWithdrawPrincipalFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawPrincipalFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawPrincipalFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawPrincipalFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawPrincipalFundsResponse.Merge(m, src)
}
func (m *MsgWithdrawPrincipalFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawPrincipalFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawPrincipalFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawPrincipalFundsResponse proto.InternalMessageInfo

// MsgExpeditePendingSwapOutRequest is the request message for expediting a swap out from a vault.
type MsgExpeditePendingSwapOutRequest struct {
	// admin is the address of the vault administrator initiating the swap out.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// request_id is the id of the pending swap out to expedite.
	RequestId uint64 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *MsgExpeditePendingSwapOutRequest) Reset()         { *m = MsgExpeditePendingSwapOutRequest{} }
func (m *MsgExpeditePendingSwapOutRequest) String() string { return proto.CompactTextString(m) }
func (*MsgExpeditePendingSwapOutRequest) ProtoMessage()    {}
func (*MsgExpeditePendingSwapOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{26}
}
func (m *MsgExpeditePendingSwapOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpeditePendingSwapOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpeditePendingSwapOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpeditePendingSwapOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpeditePendingSwapOutRequest.Merge(m, src)
}
func (m *MsgExpeditePendingSwapOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpeditePendingSwapOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpeditePendingSwapOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpeditePendingSwapOutRequest proto.InternalMessageInfo

func (m *MsgExpeditePendingSwapOutRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgExpeditePendingSwapOutRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

// MsgExpeditePendingSwapOutResponse is the response message for the ExpeditePendingSwapOut endpoint.
type MsgExpeditePendingSwapOutResponse struct {
}

func (m *MsgExpeditePendingSwapOutResponse) Reset()         { *m = MsgExpeditePendingSwapOutResponse{} }
func (m *MsgExpeditePendingSwapOutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExpeditePendingSwapOutResponse) ProtoMessage()    {}
func (*MsgExpeditePendingSwapOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{27}
}
func (m *MsgExpeditePendingSwapOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExpeditePendingSwapOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExpeditePendingSwapOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExpeditePendingSwapOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExpeditePendingSwapOutResponse.Merge(m, src)
}
func (m *MsgExpeditePendingSwapOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExpeditePendingSwapOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExpeditePendingSwapOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExpeditePendingSwapOutResponse proto.InternalMessageInfo

// MsgPauseVaultRequest is the request message to pause a vault. When processed,
// the vault disables user-facing swap operations and records the provided reason.
type MsgPauseVaultRequest struct {
	// admin is the address of the vault administrator initiating the pause.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to pause.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// reason is a human-readable explanation for pausing the vault. This is recorded
	// for operators and clients to understand the context (e.g., maintenance or anomaly).
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgPauseVaultRequest) Reset()         { *m = MsgPauseVaultRequest{} }
func (m *MsgPauseVaultRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPauseVaultRequest) ProtoMessage()    {}
func (*MsgPauseVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{28}
}
func (m *MsgPauseVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseVaultRequest.Merge(m, src)
}
func (m *MsgPauseVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseVaultRequest proto.InternalMessageInfo

func (m *MsgPauseVaultRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgPauseVaultRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgPauseVaultRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// MsgPauseVaultResponse is the response message for the PauseVault endpoint.
type MsgPauseVaultResponse struct {
}

func (m *MsgPauseVaultResponse) Reset()         { *m = MsgPauseVaultResponse{} }
func (m *MsgPauseVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseVaultResponse) ProtoMessage()    {}
func (*MsgPauseVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{29}
}
func (m *MsgPauseVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseVaultResponse.Merge(m, src)
}
func (m *MsgPauseVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseVaultResponse proto.InternalMessageInfo

// MsgUnpauseVaultRequest is the request message to unpause a vault. When processed,
// the vault re-enables user-facing swap operations (subject to existing flags).
type MsgUnpauseVaultRequest struct {
	// admin is the address of the vault administrator initiating the unpause.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to unpause.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
}

func (m *MsgUnpauseVaultRequest) Reset()         { *m = MsgUnpauseVaultRequest{} }
func (m *MsgUnpauseVaultRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseVaultRequest) ProtoMessage()    {}
func (*MsgUnpauseVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{30}
}
func (m *MsgUnpauseVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseVaultRequest.Merge(m, src)
}
func (m *MsgUnpauseVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseVaultRequest proto.InternalMessageInfo

func (m *MsgUnpauseVaultRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUnpauseVaultRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

// MsgUnpauseVaultResponse is the response message for the UnpauseVault endpoint.
type MsgUnpauseVaultResponse struct {
}

func (m *MsgUnpauseVaultResponse) Reset()         { *m = MsgUnpauseVaultResponse{} }
func (m *MsgUnpauseVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseVaultResponse) ProtoMessage()    {}
func (*MsgUnpauseVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{31}
}
func (m *MsgUnpauseVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseVaultResponse.Merge(m, src)
}
func (m *MsgUnpauseVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseVaultResponse proto.InternalMessageInfo

// MsgSetBridgeAddressRequest is the request message for configuring the bridge address for a vault.
type MsgSetBridgeAddressRequest struct {
	// admin is the address of the vault administrator.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to update.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// bridge_address is the single external address allowed to mint or burn shares on behalf of this vault.
	BridgeAddress string `protobuf:"bytes,3,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
}

func (m *MsgSetBridgeAddressRequest) Reset()         { *m = MsgSetBridgeAddressRequest{} }
func (m *MsgSetBridgeAddressRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSetBridgeAddressRequest) ProtoMessage()    {}
func (*MsgSetBridgeAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{32}
}
func (m *MsgSetBridgeAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBridgeAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBridgeAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBridgeAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBridgeAddressRequest.Merge(m, src)
}
func (m *MsgSetBridgeAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBridgeAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBridgeAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBridgeAddressRequest proto.InternalMessageInfo

func (m *MsgSetBridgeAddressRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetBridgeAddressRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgSetBridgeAddressRequest) GetBridgeAddress() string {
	if m != nil {
		return m.BridgeAddress
	}
	return ""
}

// MsgSetBridgeAddressResponse is the response message for the SetBridgeAddress endpoint.
type MsgSetBridgeAddressResponse struct {
}

func (m *MsgSetBridgeAddressResponse) Reset()         { *m = MsgSetBridgeAddressResponse{} }
func (m *MsgSetBridgeAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBridgeAddressResponse) ProtoMessage()    {}
func (*MsgSetBridgeAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{33}
}
func (m *MsgSetBridgeAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBridgeAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBridgeAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBridgeAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBridgeAddressResponse.Merge(m, src)
}
func (m *MsgSetBridgeAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBridgeAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBridgeAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBridgeAddressResponse proto.InternalMessageInfo

// MsgToggleBridgeRequest is the request message for enabling or disabling the bridge for a vault.
type MsgToggleBridgeRequest struct {
	// admin is the address of the vault administrator.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// vault_address is the bech32 address of the vault to update.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// enabled indicates whether bridge operations are allowed.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgToggleBridgeRequest) Reset()         { *m = MsgToggleBridgeRequest{} }
func (m *MsgToggleBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgToggleBridgeRequest) ProtoMessage()    {}
func (*MsgToggleBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{34}
}
func (m *MsgToggleBridgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleBridgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleBridgeRequest.Merge(m, src)
}
func (m *MsgToggleBridgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleBridgeRequest proto.InternalMessageInfo

func (m *MsgToggleBridgeRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgToggleBridgeRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgToggleBridgeRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// MsgToggleBridgeResponse is the response message for the ToggleBridge endpoint.
type MsgToggleBridgeResponse struct {
}

func (m *MsgToggleBridgeResponse) Reset()         { *m = MsgToggleBridgeResponse{} }
func (m *MsgToggleBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleBridgeResponse) ProtoMessage()    {}
func (*MsgToggleBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{35}
}
func (m *MsgToggleBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleBridgeResponse.Merge(m, src)
}
func (m *MsgToggleBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleBridgeResponse proto.InternalMessageInfo

// MsgBridgeMintSharesRequest is the request message for minting local share marker supply; must be signed by the configured bridge address.
type MsgBridgeMintSharesRequest struct {
	// bridge is the signer and must match the vault's configured bridge_address.
	Bridge string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	// vault_address is the bech32 address of the vault whose local share marker supply will be increased.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// shares is the amount of shares to mint into local marker supply.
	Shares types1.Coin `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares"`
}

func (m *MsgBridgeMintSharesRequest) Reset()         { *m = MsgBridgeMintSharesRequest{} }
func (m *MsgBridgeMintSharesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeMintSharesRequest) ProtoMessage()    {}
func (*MsgBridgeMintSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{36}
}
func (m *MsgBridgeMintSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeMintSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeMintSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeMintSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeMintSharesRequest.Merge(m, src)
}
func (m *MsgBridgeMintSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeMintSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeMintSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeMintSharesRequest proto.InternalMessageInfo

func (m *MsgBridgeMintSharesRequest) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *MsgBridgeMintSharesRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgBridgeMintSharesRequest) GetShares() types1.Coin {
	if m != nil {
		return m.Shares
	}
	return types1.Coin{}
}

// MsgBridgeMintSharesResponse is the response message for the BridgeMintShares endpoint.
type MsgBridgeMintSharesResponse struct {
}

func (m *MsgBridgeMintSharesResponse) Reset()         { *m = MsgBridgeMintSharesResponse{} }
func (m *MsgBridgeMintSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeMintSharesResponse) ProtoMessage()    {}
func (*MsgBridgeMintSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{37}
}
func (m *MsgBridgeMintSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeMintSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeMintSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeMintSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeMintSharesResponse.Merge(m, src)
}
func (m *MsgBridgeMintSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeMintSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeMintSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeMintSharesResponse proto.InternalMessageInfo

// MsgBridgeBurnSharesRequest is the request message for burning local share marker supply; must be signed by the configured bridge address.
type MsgBridgeBurnSharesRequest struct {
	// bridge is the signer and must match the vault's configured bridge_address.
	Bridge string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	// vault_address is the bech32 address of the vault whose local share marker supply will be decreased.
	VaultAddress string `protobuf:"bytes,2,opt,name=vault_address,json=vaultAddress,proto3" json:"vault_address,omitempty"`
	// shares is the amount of shares to burn from local marker supply.
	Shares types1.Coin `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares"`
}

func (m *MsgBridgeBurnSharesRequest) Reset()         { *m = MsgBridgeBurnSharesRequest{} }
func (m *MsgBridgeBurnSharesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeBurnSharesRequest) ProtoMessage()    {}
func (*MsgBridgeBurnSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{38}
}
func (m *MsgBridgeBurnSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeBurnSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeBurnSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeBurnSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeBurnSharesRequest.Merge(m, src)
}
func (m *MsgBridgeBurnSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeBurnSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeBurnSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeBurnSharesRequest proto.InternalMessageInfo

func (m *MsgBridgeBurnSharesRequest) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *MsgBridgeBurnSharesRequest) GetVaultAddress() string {
	if m != nil {
		return m.VaultAddress
	}
	return ""
}

func (m *MsgBridgeBurnSharesRequest) GetShares() types1.Coin {
	if m != nil {
		return m.Shares
	}
	return types1.Coin{}
}

// MsgBridgeBurnSharesResponse is the response message for the BridgeBurnShares endpoint.
type MsgBridgeBurnSharesResponse struct {
}

func (m *MsgBridgeBurnSharesResponse) Reset()         { *m = MsgBridgeBurnSharesResponse{} }
func (m *MsgBridgeBurnSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeBurnSharesResponse) ProtoMessage()    {}
func (*MsgBridgeBurnSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb9c8306211b32d, []int{39}
}
func (m *MsgBridgeBurnSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeBurnSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeBurnSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeBurnSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeBurnSharesResponse.Merge(m, src)
}
func (m *MsgBridgeBurnSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeBurnSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeBurnSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeBurnSharesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateVaultRequest)(nil), "provlabs.vault.v1.MsgCreateVaultRequest")
	proto.RegisterType((*MsgCreateVaultResponse)(nil), "provlabs.vault.v1.MsgCreateVaultResponse")
	proto.RegisterType((*MsgSetShareDenomMetadataRequest)(nil), "provlabs.vault.v1.MsgSetShareDenomMetadataRequest")
	proto.RegisterType((*MsgSetShareDenomMetadataResponse)(nil), "provlabs.vault.v1.MsgSetShareDenomMetadataResponse")
	proto.RegisterType((*MsgSwapInRequest)(nil), "provlabs.vault.v1.MsgSwapInRequest")
	proto.RegisterType((*MsgSwapInResponse)(nil), "provlabs.vault.v1.MsgSwapInResponse")
	proto.RegisterType((*MsgSwapOutRequest)(nil), "provlabs.vault.v1.MsgSwapOutRequest")
	proto.RegisterType((*MsgSwapOutResponse)(nil), "provlabs.vault.v1.MsgSwapOutResponse")
	proto.RegisterType((*MsgUpdateMinInterestRateRequest)(nil), "provlabs.vault.v1.MsgUpdateMinInterestRateRequest")
	proto.RegisterType((*MsgUpdateMinInterestRateResponse)(nil), "provlabs.vault.v1.MsgUpdateMinInterestRateResponse")
	proto.RegisterType((*MsgUpdateMaxInterestRateRequest)(nil), "provlabs.vault.v1.MsgUpdateMaxInterestRateRequest")
	proto.RegisterType((*MsgUpdateMaxInterestRateResponse)(nil), "provlabs.vault.v1.MsgUpdateMaxInterestRateResponse")
	proto.RegisterType((*MsgUpdateInterestRateRequest)(nil), "provlabs.vault.v1.MsgUpdateInterestRateRequest")
	proto.RegisterType((*MsgUpdateInterestRateResponse)(nil), "provlabs.vault.v1.MsgUpdateInterestRateResponse")
	proto.RegisterType((*MsgToggleSwapInRequest)(nil), "provlabs.vault.v1.MsgToggleSwapInRequest")
	proto.RegisterType((*MsgToggleSwapInResponse)(nil), "provlabs.vault.v1.MsgToggleSwapInResponse")
	proto.RegisterType((*MsgToggleSwapOutRequest)(nil), "provlabs.vault.v1.MsgToggleSwapOutRequest")
	proto.RegisterType((*MsgToggleSwapOutResponse)(nil), "provlabs.vault.v1.MsgToggleSwapOutResponse")
	proto.RegisterType((*MsgDepositInterestFundsRequest)(nil), "provlabs.vault.v1.MsgDepositInterestFundsRequest")
	proto.RegisterType((*MsgDepositInterestFundsResponse)(nil), "provlabs.vault.v1.MsgDepositInterestFundsResponse")
	proto.RegisterType((*MsgWithdrawInterestFundsRequest)(nil), "provlabs.vault.v1.MsgWithdrawInterestFundsRequest")
	proto.RegisterType((*MsgWithdrawInterestFundsResponse)(nil), "provlabs.vault.v1.MsgWithdrawInterestFundsResponse")
	proto.RegisterType((*MsgDepositPrincipalFundsRequest)(nil), "provlabs.vault.v1.MsgDepositPrincipalFundsRequest")
	proto.RegisterType((*MsgDepositPrincipalFundsResponse)(nil), "provlabs.vault.v1.MsgDepositPrincipalFundsResponse")
	proto.RegisterType((*MsgWithdrawPrincipalFundsRequest)(nil), "provlabs.vault.v1.MsgWithdrawPrincipalFundsRequest")
	proto.RegisterType((*MsgWithdrawPrincipalFundsResponse)(nil), "provlabs.vault.v1.MsgWithdrawPrincipalFundsResponse")
	proto.RegisterType((*MsgExpeditePendingSwapOutRequest)(nil), "provlabs.vault.v1.MsgExpeditePendingSwapOutRequest")
	proto.RegisterType((*MsgExpeditePendingSwapOutResponse)(nil), "provlabs.vault.v1.MsgExpeditePendingSwapOutResponse")
	proto.RegisterType((*MsgPauseVaultRequest)(nil), "provlabs.vault.v1.MsgPauseVaultRequest")
	proto.RegisterType((*MsgPauseVaultResponse)(nil), "provlabs.vault.v1.MsgPauseVaultResponse")
	proto.RegisterType((*MsgUnpauseVaultRequest)(nil), "provlabs.vault.v1.MsgUnpauseVaultRequest")
	proto.RegisterType((*MsgUnpauseVaultResponse)(nil), "provlabs.vault.v1.MsgUnpauseVaultResponse")
	proto.RegisterType((*MsgSetBridgeAddressRequest)(nil), "provlabs.vault.v1.MsgSetBridgeAddressRequest")
	proto.RegisterType((*MsgSetBridgeAddressResponse)(nil), "provlabs.vault.v1.MsgSetBridgeAddressResponse")
	proto.RegisterType((*MsgToggleBridgeRequest)(nil), "provlabs.vault.v1.MsgToggleBridgeRequest")
	proto.RegisterType((*MsgToggleBridgeResponse)(nil), "provlabs.vault.v1.MsgToggleBridgeResponse")
	proto.RegisterType((*MsgBridgeMintSharesRequest)(nil), "provlabs.vault.v1.MsgBridgeMintSharesRequest")
	proto.RegisterType((*MsgBridgeMintSharesResponse)(nil), "provlabs.vault.v1.MsgBridgeMintSharesResponse")
	proto.RegisterType((*MsgBridgeBurnSharesRequest)(nil), "provlabs.vault.v1.MsgBridgeBurnSharesRequest")
	proto.RegisterType((*MsgBridgeBurnSharesResponse)(nil), "provlabs.vault.v1.MsgBridgeBurnSharesResponse")
}

func init() { proto.RegisterFile("provlabs/vault/v1/tx.proto", fileDescriptor_1bb9c8306211b32d) }

var fileDescriptor_1bb9c8306211b32d = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xa6, 0x69, 0xda, 0xbe, 0xa4, 0x5f, 0xa3, 0x34, 0x75, 0x16, 0xe2, 0xb4, 0x2e, 0x88,
	0xb4, 0xa8, 0x76, 0x93, 0x22, 0x01, 0x95, 0x10, 0x6a, 0x5a, 0x10, 0x3d, 0x58, 0x54, 0x0e, 0x2d,
	0x12, 0x12, 0xb2, 0xc6, 0xd9, 0xd1, 0x66, 0x55, 0xef, 0xac, 0xbb, 0x33, 0xfe, 0xc8, 0xa1, 0x52,
	0x05, 0x27, 0x4e, 0x20, 0xc1, 0x09, 0x89, 0xff, 0x80, 0x43, 0x0f, 0x5c, 0xf8, 0x10, 0xe7, 0x1e,
	0x2b, 0x4e, 0x88, 0x43, 0x85, 0xda, 0x43, 0xff, 0x06, 0x2e, 0x08, 0xed, 0xcc, 0xb3, 0xbd, 0xeb,
	0x9d, 0x5d, 0xbb, 0x94, 0x86, 0xe6, 0x94, 0xec, 0xcc, 0x7b, 0xf3, 0x7e, 0xbf, 0x37, 0x6f, 0x67,
	0x7e, 0xcf, 0x0b, 0x76, 0x2b, 0x0c, 0x3a, 0x4d, 0xda, 0x10, 0x95, 0x0e, 0x6d, 0x37, 0x65, 0xa5,
	0xb3, 0x56, 0x91, 0xbd, 0x72, 0x2b, 0x0c, 0x64, 0x40, 0x8e, 0xf7, 0xe7, 0xca, 0x6a, 0xae, 0xdc,
	0x59, 0xb3, 0x8b, 0x5b, 0x81, 0xf0, 0x03, 0x51, 0x69, 0x50, 0x7e, 0xab, 0xd2, 0x59, 0x6b, 0x30,
	0x49, 0xd7, 0xd4, 0x83, 0x76, 0x89, 0xcd, 0x0b, 0x36, 0x98, 0xdf, 0x0a, 0x3c, 0x8e, 0xf3, 0x27,
	0x71, 0xde, 0x17, 0x6e, 0x14, 0xca, 0x17, 0x2e, 0x4e, 0x2c, 0xe9, 0x89, 0xba, 0x7a, 0xaa, 0xe8,
	0x07, 0x9c, 0x5a, 0x70, 0x03, 0x37, 0xd0, 0xe3, 0xd1, 0x7f, 0x7a, 0xb4, 0xf4, 0xb7, 0x05, 0x27,
	0xaa, 0xc2, 0xbd, 0x12, 0x32, 0x2a, 0xd9, 0xcd, 0x08, 0x5f, 0x8d, 0xdd, 0x6e, 0x33, 0x21, 0x49,
	0x19, 0xf6, 0x53, 0xc7, 0xf7, 0x78, 0xc1, 0x3a, 0x65, 0xad, 0x1e, 0xda, 0x28, 0xfc, 0xf6, 0xc3,
	0xf9, 0x05, 0x5c, 0xf0, 0xb2, 0xe3, 0x84, 0x4c, 0x88, 0x4d, 0x19, 0x7a, 0xdc, 0xad, 0x69, 0x33,
	0xb2, 0x02, 0x73, 0x62, 0x9b, 0x86, 0xac, 0xee, 0x30, 0x1e, 0xf8, 0x85, 0xe9, 0xc8, 0xab, 0x06,
	0x6a, 0xe8, 0x6a, 0x34, 0x42, 0xce, 0xc2, 0xb1, 0x36, 0x77, 0x58, 0xd8, 0xdc, 0xf1, 0xb8, 0x5b,
	0xa7, 0x42, 0x30, 0x59, 0xd8, 0xa7, 0xac, 0x8e, 0x0e, 0xc7, 0x2f, 0x47, 0xc3, 0xe4, 0x0c, 0x1c,
	0x6e, 0xd1, 0x1d, 0x9f, 0x71, 0x89, 0xab, 0xcd, 0x28, 0xbb, 0x79, 0x1c, 0xd4, 0xeb, 0xbd, 0x05,
	0x85, 0xae, 0x27, 0xb7, 0x9d, 0x90, 0x76, 0x69, 0xb3, 0xee, 0xb0, 0x26, 0xdd, 0xa9, 0x0b, 0xb6,
	0x15, 0x70, 0x47, 0x14, 0xf6, 0x9f, 0xb2, 0x56, 0x67, 0x6a, 0x8b, 0xc3, 0xf9, 0xab, 0xd1, 0xf4,
	0xa6, 0x9e, 0xbd, 0x04, 0x9f, 0x3d, 0xb9, 0x77, 0x4e, 0xc3, 0x2e, 0xbd, 0x03, 0x8b, 0xa3, 0xfc,
	0x45, 0x2b, 0xe0, 0x82, 0x45, 0x20, 0xd4, 0x86, 0xd5, 0xa9, 0xa6, 0xab, 0x13, 0x51, 0x9b, 0x57,
	0x83, 0x98, 0x82, 0xd2, 0x5f, 0x16, 0xac, 0x54, 0x85, 0xbb, 0xc9, 0xe4, 0xe6, 0x80, 0x69, 0x95,
	0x49, 0xea, 0x50, 0x49, 0xfb, 0x99, 0x6c, 0xc3, 0x41, 0x1f, 0x87, 0xd4, 0x1a, 0x73, 0xeb, 0xcb,
	0x65, 0xcc, 0xa4, 0xda, 0x73, 0xdc, 0xe0, 0x72, 0xdf, 0x6f, 0xe3, 0xd2, 0xfd, 0x87, 0x2b, 0x53,
	0x7f, 0x3c, 0x5c, 0x59, 0x77, 0x3d, 0xb9, 0xdd, 0x6e, 0x94, 0xb7, 0x02, 0x1f, 0xf7, 0x12, 0xff,
	0x9c, 0x17, 0xce, 0xad, 0x4a, 0x4f, 0x97, 0x8f, 0xdc, 0x69, 0x31, 0x31, 0xf0, 0xad, 0x0d, 0x42,
	0x0d, 0x37, 0x70, 0x7a, 0xb2, 0x0d, 0x4c, 0xf1, 0xdd, 0x97, 0xe6, 0x9b, 0x48, 0x5d, 0x09, 0x4e,
	0x65, 0x53, 0xd7, 0x49, 0x2c, 0x7d, 0x6f, 0xc1, 0xb1, 0xc8, 0xa8, 0x4b, 0x5b, 0xd7, 0x78, 0xac,
	0xb4, 0x82, 0x2e, 0x67, 0xe1, 0xf8, 0xd2, 0x52, 0x66, 0x69, 0x64, 0xd3, 0x69, 0x64, 0xe4, 0x4d,
	0x98, 0x55, 0x35, 0xa5, 0x71, 0xcf, 0xad, 0x2f, 0x0d, 0x73, 0x2c, 0xd8, 0x20, 0xc7, 0x57, 0x02,
	0x8f, 0x6f, 0xcc, 0x44, 0xf9, 0xad, 0xa1, 0x39, 0x52, 0x52, 0x91, 0x4a, 0x9f, 0xc2, 0xf1, 0x18,
	0x5a, 0x2c, 0x84, 0x0f, 0xe0, 0xa8, 0x2a, 0x63, 0x51, 0x0f, 0xd9, 0x16, 0xf3, 0x3a, 0xcc, 0xc1,
	0x6d, 0x1c, 0x1b, 0xe2, 0x88, 0xf6, 0xab, 0xa1, 0x5b, 0xe9, 0x81, 0x35, 0x58, 0xff, 0xc3, 0xb6,
	0x7c, 0x21, 0xd3, 0x41, 0x4e, 0xc3, 0x7c, 0xc8, 0x1c, 0xc6, 0xfc, 0xc4, 0xab, 0x37, 0xa7, 0xc7,
	0xd4, 0x26, 0x27, 0x32, 0x76, 0x11, 0x48, 0x9c, 0x11, 0xa6, 0x6c, 0x19, 0x20, 0xd4, 0xec, 0xea,
	0x9e, 0xce, 0xd6, 0x4c, 0xed, 0x10, 0x8e, 0x5c, 0x73, 0x4a, 0xdf, 0xe9, 0xb7, 0xe6, 0x46, 0xcb,
	0xa1, 0x92, 0x55, 0x3d, 0x7e, 0x8d, 0x4b, 0x16, 0x32, 0x21, 0x6b, 0x54, 0xb2, 0x7f, 0x7b, 0xfe,
	0x4c, 0x94, 0x95, 0x25, 0x38, 0xe8, 0x7b, 0xbc, 0x1e, 0x52, 0xc9, 0xb0, 0xbc, 0x0f, 0xf8, 0x1e,
	0x8f, 0xc2, 0x1a, 0x2a, 0x3b, 0x03, 0x1e, 0x56, 0x76, 0x92, 0x03, 0xed, 0xed, 0x2a, 0x07, 0xda,
	0x4b, 0x72, 0xa0, 0xbd, 0x7c, 0x0e, 0xa3, 0xf0, 0x90, 0xc3, 0xb7, 0x16, 0xbc, 0x3c, 0x30, 0xda,
	0x4d, 0x02, 0x9c, 0x75, 0x13, 0x04, 0x38, 0xeb, 0xa6, 0x08, 0xac, 0xc0, 0x72, 0x06, 0x36, 0x44,
	0xff, 0xb5, 0xa5, 0xce, 0xee, 0x8f, 0x02, 0xd7, 0x6d, 0xb2, 0xd4, 0x09, 0xf3, 0xdf, 0xe3, 0x2e,
	0xc0, 0x01, 0xc6, 0x69, 0xa3, 0xc9, 0x1c, 0x05, 0xfb, 0x60, 0xad, 0xff, 0x98, 0x80, 0xbd, 0x04,
	0x27, 0x53, 0xa0, 0x10, 0xf0, 0x37, 0xd6, 0xc8, 0x5c, 0xf2, 0x10, 0xf8, 0xbf, 0x10, 0xdb, 0x50,
	0x48, 0xa3, 0x42, 0xc8, 0x3f, 0x59, 0x50, 0xac, 0x0a, 0xf7, 0x2a, 0x6b, 0x05, 0xc2, 0x93, 0xfd,
	0x6d, 0x78, 0xbf, 0xcd, 0x1d, 0xf1, 0x5c, 0x91, 0x47, 0xc7, 0x97, 0x1f, 0xb4, 0xb9, 0x9c, 0xfc,
	0xf8, 0x52, 0xe6, 0x09, 0x62, 0xa7, 0xd5, 0x1b, 0x6a, 0xc6, 0x8e, 0xfc, 0x7e, 0xd6, 0x6f, 0xf1,
	0xc7, 0x28, 0x14, 0xf6, 0x18, 0x41, 0xfd, 0x8e, 0x67, 0x80, 0x4f, 0x32, 0xc4, 0x2c, 0x5c, 0x0f,
	0x3d, 0xbe, 0xe5, 0xb5, 0x68, 0x73, 0x4f, 0x31, 0xcc, 0x00, 0x8f, 0x0c, 0x7f, 0xb1, 0x12, 0x69,
	0xd8, 0x6b, 0x14, 0xcf, 0xc0, 0xe9, 0x1c, 0xf4, 0xc8, 0xf1, 0x8e, 0xa2, 0xf8, 0x5e, 0xaf, 0xc5,
	0x1c, 0x4f, 0xb2, 0xeb, 0x8c, 0x3b, 0x1e, 0x77, 0x9f, 0xf1, 0x08, 0x49, 0x5e, 0xd2, 0xd3, 0x23,
	0x97, 0xb4, 0x01, 0x63, 0x56, 0x78, 0xc4, 0xf8, 0xa5, 0x05, 0x0b, 0x55, 0xe1, 0x5e, 0xa7, 0x6d,
	0xf1, 0x6c, 0xad, 0xc4, 0x44, 0xb9, 0x5f, 0x84, 0xd9, 0x90, 0x51, 0x11, 0x70, 0xbc, 0x43, 0xf0,
	0x29, 0x01, 0xfb, 0xa4, 0x6a, 0x6e, 0xe2, 0x80, 0x10, 0xea, 0x8e, 0xba, 0x39, 0x6e, 0xf0, 0xd6,
	0xae, 0x60, 0x35, 0xdc, 0x0f, 0xc9, 0xd0, 0x88, 0xea, 0x57, 0x0b, 0x6c, 0xad, 0xa8, 0x37, 0x42,
	0xcf, 0x71, 0x19, 0xba, 0x3f, 0xd7, 0x34, 0xbe, 0x0b, 0x47, 0x1a, 0x2a, 0x58, 0x52, 0xf6, 0xe7,
	0xac, 0x7e, 0xb8, 0x11, 0x07, 0x97, 0xe0, 0xb6, 0x0c, 0x2f, 0x19, 0xf1, 0x9b, 0x2e, 0x6c, 0x6d,
	0xf2, 0x82, 0x5d, 0xd8, 0x7d, 0x50, 0x08, 0xf8, 0x47, 0xbd, 0x21, 0x7a, 0xb4, 0xea, 0x71, 0xdd,
	0xe9, 0x0c, 0x36, 0xe4, 0x02, 0xcc, 0xea, 0x5c, 0x8c, 0x45, 0x8d, 0x76, 0x13, 0x9f, 0x2a, 0xba,
	0x6f, 0x98, 0xf8, 0x54, 0xd1, 0xe6, 0x97, 0xe6, 0x22, 0x56, 0x18, 0x0a, 0xf7, 0x22, 0x0d, 0xdd,
	0x44, 0x6d, 0xa3, 0x1d, 0xf2, 0x3d, 0x4a, 0x2d, 0x0e, 0x5d, 0x53, 0x5b, 0xff, 0x82, 0xc0, 0xbe,
	0xaa, 0x70, 0x49, 0x03, 0xe6, 0x62, 0x7d, 0x3d, 0x59, 0x2d, 0xa7, 0x7e, 0x88, 0x29, 0x1b, 0x7f,
	0xfa, 0xb0, 0xcf, 0x4e, 0x60, 0x89, 0x8d, 0xce, 0x5d, 0x0b, 0x4e, 0x18, 0x3b, 0x60, 0xb2, 0x6e,
	0x5e, 0x24, 0xef, 0x97, 0x02, 0xfb, 0xe2, 0x53, 0xf9, 0x20, 0x84, 0x4d, 0x98, 0xd5, 0x3a, 0x93,
	0x9c, 0xc9, 0x70, 0x8f, 0x4b, 0x63, 0xfb, 0x95, 0x7c, 0x23, 0x5c, 0xf4, 0x26, 0x1c, 0xc0, 0xe3,
	0x9d, 0xe4, 0x38, 0x0c, 0x2f, 0x1f, 0xfb, 0xd5, 0x31, 0x56, 0xb1, 0x7c, 0x19, 0xfb, 0xaa, 0xac,
	0x7c, 0xe5, 0xf5, 0x88, 0x59, 0xf9, 0xca, 0x6d, 0xdc, 0xe2, 0x10, 0x92, 0x6d, 0xd1, 0x18, 0x08,
	0xc6, 0x16, 0x6f, 0x0c, 0x04, 0x73, 0xdf, 0x45, 0xba, 0x40, 0xd2, 0x7d, 0x0d, 0xa9, 0xe4, 0x2d,
	0x65, 0x8a, 0x7d, 0x61, 0x72, 0x07, 0x0c, 0xcc, 0x60, 0x3e, 0xde, 0x99, 0x90, 0x8c, 0x4a, 0x37,
	0xb4, 0x54, 0xf6, 0xb9, 0x49, 0x4c, 0x31, 0xcc, 0x36, 0x1c, 0x4e, 0xb4, 0x13, 0x64, 0xac, 0x73,
	0xac, 0x92, 0x5e, 0x9f, 0xc8, 0x16, 0x23, 0xdd, 0x81, 0x05, 0x93, 0xbe, 0x27, 0x6b, 0xe6, 0x45,
	0x72, 0xfa, 0x18, 0x7b, 0xfd, 0x69, 0x5c, 0x62, 0xb5, 0x64, 0x94, 0xdf, 0x59, 0xb5, 0x94, 0xd7,
	0x68, 0x64, 0xd5, 0x52, 0xae, 0xbe, 0x57, 0x10, 0x8c, 0xfa, 0x98, 0xe4, 0x13, 0x32, 0xca, 0xe4,
	0x2c, 0x08, 0xb9, 0x02, 0x9c, 0x7c, 0x6e, 0xc1, 0xa2, 0x59, 0xbf, 0x92, 0x31, 0x94, 0xcc, 0x20,
	0xde, 0x78, 0x3a, 0xa7, 0x18, 0x0a, 0xb3, 0x42, 0xcd, 0x42, 0x91, 0x2b, 0xa7, 0xb3, 0x50, 0xe4,
	0x8b, 0x60, 0x52, 0x07, 0x18, 0xea, 0x4d, 0xf2, 0x9a, 0x79, 0x8d, 0x94, 0x44, 0xb6, 0x57, 0xc7,
	0x1b, 0x0e, 0x5f, 0xe1, 0xb8, 0x78, 0xcc, 0x7a, 0x85, 0x0d, 0xda, 0x36, 0xeb, 0x15, 0x36, 0x69,
	0x51, 0x72, 0x1b, 0x8e, 0x8d, 0xea, 0x38, 0x72, 0x3e, 0xf3, 0x7a, 0x32, 0xe9, 0x55, 0xbb, 0x3c,
	0xa9, 0xf9, 0xe8, 0xe1, 0xa4, 0xa7, 0xf3, 0x0f, 0xa7, 0x84, 0x7c, 0xcc, 0x3f, 0x9c, 0x92, 0xa2,
	0x2e, 0x62, 0x36, 0xaa, 0x8a, 0xb2, 0x98, 0x65, 0x08, 0xbf, 0x2c, 0x66, 0x59, 0x62, 0x6b, 0x18,
	0x72, 0xa8, 0x56, 0xf2, 0x43, 0xa6, 0x04, 0x59, 0x7e, 0xc8, 0xb4, 0x08, 0xb2, 0xf7, 0xdf, 0x7d,
	0x72, 0xef, 0x9c, 0xb5, 0xf1, 0xf6, 0xfd, 0x47, 0x45, 0xeb, 0xc1, 0xa3, 0xa2, 0xf5, 0xe7, 0xa3,
	0xa2, 0xf5, 0xd5, 0xe3, 0xe2, 0xd4, 0x83, 0xc7, 0xc5, 0xa9, 0xdf, 0x1f, 0x17, 0xa7, 0x3e, 0x59,
	0x89, 0x7d, 0x5c, 0x18, 0xf9, 0x7a, 0xa5, 0x3e, 0x29, 0x34, 0x66, 0xd5, 0x17, 0xa2, 0x8b, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x46, 0xa1, 0xa0, 0xdc, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateVault creates a new vault.
	CreateVault(ctx context.Context, in *MsgCreateVaultRequest, opts ...grpc.CallOption) (*MsgCreateVaultResponse, error)
	// SetShareDenomMetadata allows Denom Metadata (see bank module) to be set for the vault's share denom.
	// Similar to marker's SetDenomMetadata, but scoped to a specific vault. Only the vault admin may call this.
	SetShareDenomMetadata(ctx context.Context, in *MsgSetShareDenomMetadataRequest, opts ...grpc.CallOption) (*MsgSetShareDenomMetadataResponse, error)
	// SwapIn exchanges underlying assets for vault shares by depositing them into a vault.
	SwapIn(ctx context.Context, in *MsgSwapInRequest, opts ...grpc.CallOption) (*MsgSwapInResponse, error)
	// SwapOut exchanges vault shares for underlying assets by withdrawing from a vault.
	SwapOut(ctx context.Context, in *MsgSwapOutRequest, opts ...grpc.CallOption) (*MsgSwapOutResponse, error)
	// UpdateMinInterestRate sets the minimum allowed annual interest rate for a vault.
	UpdateMinInterestRate(ctx context.Context, in *MsgUpdateMinInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateMinInterestRateResponse, error)
	// UpdateMaxInterestRate sets the maximum allowed annual interest rate for a vault.
	UpdateMaxInterestRate(ctx context.Context, in *MsgUpdateMaxInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateMaxInterestRateResponse, error)
	// UpdateInterestRate allows the interest admin to update the current annual interest rate within limits.
	UpdateInterestRate(ctx context.Context, in *MsgUpdateInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateInterestRateResponse, error)
	// ToggleSwapIn allows enabling or disabling swap-in operations for a vault.
	ToggleSwapIn(ctx context.Context, in *MsgToggleSwapInRequest, opts ...grpc.CallOption) (*MsgToggleSwapInResponse, error)
	// ToggleSwapOut allows enabling or disabling swap-out operations for a vault.
	ToggleSwapOut(ctx context.Context, in *MsgToggleSwapOutRequest, opts ...grpc.CallOption) (*MsgToggleSwapOutResponse, error)
	// DepositInterestFunds allows depositing funds into the vault for paying interest.
	DepositInterestFunds(ctx context.Context, in *MsgDepositInterestFundsRequest, opts ...grpc.CallOption) (*MsgDepositInterestFundsResponse, error)
	// WithdrawInterestFunds allows withdrawing unused interest funds (admin only).
	WithdrawInterestFunds(ctx context.Context, in *MsgWithdrawInterestFundsRequest, opts ...grpc.CallOption) (*MsgWithdrawInterestFundsResponse, error)
	// DepositPrincipalFunds allows depositing principal funds into a vault.
	DepositPrincipalFunds(ctx context.Context, in *MsgDepositPrincipalFundsRequest, opts ...grpc.CallOption) (*MsgDepositPrincipalFundsResponse, error)
	// WithdrawPrincipalFunds allows withdrawing principal funds from a vault.
	WithdrawPrincipalFunds(ctx context.Context, in *MsgWithdrawPrincipalFundsRequest, opts ...grpc.CallOption) (*MsgWithdrawPrincipalFundsResponse, error)
	// ExpeditePendingSwapOut expedites a pending swap out from a vault.
	ExpeditePendingSwapOut(ctx context.Context, in *MsgExpeditePendingSwapOutRequest, opts ...grpc.CallOption) (*MsgExpeditePendingSwapOutResponse, error)
	// PauseVault pauses user-facing swap operations for a vault and records a reason (admin only).
	PauseVault(ctx context.Context, in *MsgPauseVaultRequest, opts ...grpc.CallOption) (*MsgPauseVaultResponse, error)
	// UnpauseVault re-enables user-facing swap operations for a vault (admin only).
	UnpauseVault(ctx context.Context, in *MsgUnpauseVaultRequest, opts ...grpc.CallOption) (*MsgUnpauseVaultResponse, error)
	// SetBridgeAddress sets the single external bridge address allowed to mint or burn shares for a vault.
	SetBridgeAddress(ctx context.Context, in *MsgSetBridgeAddressRequest, opts ...grpc.CallOption) (*MsgSetBridgeAddressResponse, error)
	// ToggleBridge enables or disables the bridge functionality for a vault.
	ToggleBridge(ctx context.Context, in *MsgToggleBridgeRequest, opts ...grpc.CallOption) (*MsgToggleBridgeResponse, error)
	// BridgeMintShares mints local share marker supply for a vault; must be signed by the configured bridge address.
	BridgeMintShares(ctx context.Context, in *MsgBridgeMintSharesRequest, opts ...grpc.CallOption) (*MsgBridgeMintSharesResponse, error)
	// BridgeBurnShares burns local share marker supply for a vault; must be signed by the configured bridge address.
	BridgeBurnShares(ctx context.Context, in *MsgBridgeBurnSharesRequest, opts ...grpc.CallOption) (*MsgBridgeBurnSharesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVault(ctx context.Context, in *MsgCreateVaultRequest, opts ...grpc.CallOption) (*MsgCreateVaultResponse, error) {
	out := new(MsgCreateVaultResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/CreateVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetShareDenomMetadata(ctx context.Context, in *MsgSetShareDenomMetadataRequest, opts ...grpc.CallOption) (*MsgSetShareDenomMetadataResponse, error) {
	out := new(MsgSetShareDenomMetadataResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/SetShareDenomMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapIn(ctx context.Context, in *MsgSwapInRequest, opts ...grpc.CallOption) (*MsgSwapInResponse, error) {
	out := new(MsgSwapInResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/SwapIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapOut(ctx context.Context, in *MsgSwapOutRequest, opts ...grpc.CallOption) (*MsgSwapOutResponse, error) {
	out := new(MsgSwapOutResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/SwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMinInterestRate(ctx context.Context, in *MsgUpdateMinInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateMinInterestRateResponse, error) {
	out := new(MsgUpdateMinInterestRateResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/UpdateMinInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaxInterestRate(ctx context.Context, in *MsgUpdateMaxInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateMaxInterestRateResponse, error) {
	out := new(MsgUpdateMaxInterestRateResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/UpdateMaxInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateInterestRate(ctx context.Context, in *MsgUpdateInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateInterestRateResponse, error) {
	out := new(MsgUpdateInterestRateResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/UpdateInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleSwapIn(ctx context.Context, in *MsgToggleSwapInRequest, opts ...grpc.CallOption) (*MsgToggleSwapInResponse, error) {
	out := new(MsgToggleSwapInResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/ToggleSwapIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleSwapOut(ctx context.Context, in *MsgToggleSwapOutRequest, opts ...grpc.CallOption) (*MsgToggleSwapOutResponse, error) {
	out := new(MsgToggleSwapOutResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/ToggleSwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositInterestFunds(ctx context.Context, in *MsgDepositInterestFundsRequest, opts ...grpc.CallOption) (*MsgDepositInterestFundsResponse, error) {
	out := new(MsgDepositInterestFundsResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/DepositInterestFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawInterestFunds(ctx context.Context, in *MsgWithdrawInterestFundsRequest, opts ...grpc.CallOption) (*MsgWithdrawInterestFundsResponse, error) {
	out := new(MsgWithdrawInterestFundsResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/WithdrawInterestFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositPrincipalFunds(ctx context.Context, in *MsgDepositPrincipalFundsRequest, opts ...grpc.CallOption) (*MsgDepositPrincipalFundsResponse, error) {
	out := new(MsgDepositPrincipalFundsResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/DepositPrincipalFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawPrincipalFunds(ctx context.Context, in *MsgWithdrawPrincipalFundsRequest, opts ...grpc.CallOption) (*MsgWithdrawPrincipalFundsResponse, error) {
	out := new(MsgWithdrawPrincipalFundsResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/WithdrawPrincipalFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExpeditePendingSwapOut(ctx context.Context, in *MsgExpeditePendingSwapOutRequest, opts ...grpc.CallOption) (*MsgExpeditePendingSwapOutResponse, error) {
	out := new(MsgExpeditePendingSwapOutResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/ExpeditePendingSwapOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseVault(ctx context.Context, in *MsgPauseVaultRequest, opts ...grpc.CallOption) (*MsgPauseVaultResponse, error) {
	out := new(MsgPauseVaultResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/PauseVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseVault(ctx context.Context, in *MsgUnpauseVaultRequest, opts ...grpc.CallOption) (*MsgUnpauseVaultResponse, error) {
	out := new(MsgUnpauseVaultResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/UnpauseVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBridgeAddress(ctx context.Context, in *MsgSetBridgeAddressRequest, opts ...grpc.CallOption) (*MsgSetBridgeAddressResponse, error) {
	out := new(MsgSetBridgeAddressResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/SetBridgeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleBridge(ctx context.Context, in *MsgToggleBridgeRequest, opts ...grpc.CallOption) (*MsgToggleBridgeResponse, error) {
	out := new(MsgToggleBridgeResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/ToggleBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BridgeMintShares(ctx context.Context, in *MsgBridgeMintSharesRequest, opts ...grpc.CallOption) (*MsgBridgeMintSharesResponse, error) {
	out := new(MsgBridgeMintSharesResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/BridgeMintShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BridgeBurnShares(ctx context.Context, in *MsgBridgeBurnSharesRequest, opts ...grpc.CallOption) (*MsgBridgeBurnSharesResponse, error) {
	out := new(MsgBridgeBurnSharesResponse)
	err := c.cc.Invoke(ctx, "/provlabs.vault.v1.Msg/BridgeBurnShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateVault creates a new vault.
	CreateVault(context.Context, *MsgCreateVaultRequest) (*MsgCreateVaultResponse, error)
	// SetShareDenomMetadata allows Denom Metadata (see bank module) to be set for the vault's share denom.
	// Similar to marker's SetDenomMetadata, but scoped to a specific vault. Only the vault admin may call this.
	SetShareDenomMetadata(context.Context, *MsgSetShareDenomMetadataRequest) (*MsgSetShareDenomMetadataResponse, error)
	// SwapIn exchanges underlying assets for vault shares by depositing them into a vault.
	SwapIn(context.Context, *MsgSwapInRequest) (*MsgSwapInResponse, error)
	// SwapOut exchanges vault shares for underlying assets by withdrawing from a vault.
	SwapOut(context.Context, *MsgSwapOutRequest) (*MsgSwapOutResponse, error)
	// UpdateMinInterestRate sets the minimum allowed annual interest rate for a vault.
	UpdateMinInterestRate(context.Context, *MsgUpdateMinInterestRateRequest) (*MsgUpdateMinInterestRateResponse, error)
	// UpdateMaxInterestRate sets the maximum allowed annual interest rate for a vault.
	UpdateMaxInterestRate(context.Context, *MsgUpdateMaxInterestRateRequest) (*MsgUpdateMaxInterestRateResponse, error)
	// UpdateInterestRate allows the interest admin to update the current annual interest rate within limits.
	UpdateInterestRate(context.Context, *MsgUpdateInterestRateRequest) (*MsgUpdateInterestRateResponse, error)
	// ToggleSwapIn allows enabling or disabling swap-in operations for a vault.
	ToggleSwapIn(context.Context, *MsgToggleSwapInRequest) (*MsgToggleSwapInResponse, error)
	// ToggleSwapOut allows enabling or disabling swap-out operations for a vault.
	ToggleSwapOut(context.Context, *MsgToggleSwapOutRequest) (*MsgToggleSwapOutResponse, error)
	// DepositInterestFunds allows depositing funds into the vault for paying interest.
	DepositInterestFunds(context.Context, *MsgDepositInterestFundsRequest) (*MsgDepositInterestFundsResponse, error)
	// WithdrawInterestFunds allows withdrawing unused interest funds (admin only).
	WithdrawInterestFunds(context.Context, *MsgWithdrawInterestFundsRequest) (*MsgWithdrawInterestFundsResponse, error)
	// DepositPrincipalFunds allows depositing principal funds into a vault.
	DepositPrincipalFunds(context.Context, *MsgDepositPrincipalFundsRequest) (*MsgDepositPrincipalFundsResponse, error)
	// WithdrawPrincipalFunds allows withdrawing principal funds from a vault.
	WithdrawPrincipalFunds(context.Context, *MsgWithdrawPrincipalFundsRequest) (*MsgWithdrawPrincipalFundsResponse, error)
	// ExpeditePendingSwapOut expedites a pending swap out from a vault.
	ExpeditePendingSwapOut(context.Context, *MsgExpeditePendingSwapOutRequest) (*MsgExpeditePendingSwapOutResponse, error)
	// PauseVault pauses user-facing swap operations for a vault and records a reason (admin only).
	PauseVault(context.Context, *MsgPauseVaultRequest) (*MsgPauseVaultResponse, error)
	// UnpauseVault re-enables user-facing swap operations for a vault (admin only).
	UnpauseVault(context.Context, *MsgUnpauseVaultRequest) (*MsgUnpauseVaultResponse, error)
	// SetBridgeAddress sets the single external bridge address allowed to mint or burn shares for a vault.
	SetBridgeAddress(context.Context, *MsgSetBridgeAddressRequest) (*MsgSetBridgeAddressResponse, error)
	// ToggleBridge enables or disables the bridge functionality for a vault.
	ToggleBridge(context.Context, *MsgToggleBridgeRequest) (*MsgToggleBridgeResponse, error)
	// BridgeMintShares mints local share marker supply for a vault; must be signed by the configured bridge address.
	BridgeMintShares(context.Context, *MsgBridgeMintSharesRequest) (*MsgBridgeMintSharesResponse, error)
	// BridgeBurnShares burns local share marker supply for a vault; must be signed by the configured bridge address.
	BridgeBurnShares(context.Context, *MsgBridgeBurnSharesRequest) (*MsgBridgeBurnSharesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVault(ctx context.Context, req *MsgCreateVaultRequest) (*MsgCreateVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVault not implemented")
}
func (*UnimplementedMsgServer) SetShareDenomMetadata(ctx context.Context, req *MsgSetShareDenomMetadataRequest) (*MsgSetShareDenomMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShareDenomMetadata not implemented")
}
func (*UnimplementedMsgServer) SwapIn(ctx context.Context, req *MsgSwapInRequest) (*MsgSwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapIn not implemented")
}
func (*UnimplementedMsgServer) SwapOut(ctx context.Context, req *MsgSwapOutRequest) (*MsgSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapOut not implemented")
}
func (*UnimplementedMsgServer) UpdateMinInterestRate(ctx context.Context, req *MsgUpdateMinInterestRateRequest) (*MsgUpdateMinInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinInterestRate not implemented")
}
func (*UnimplementedMsgServer) UpdateMaxInterestRate(ctx context.Context, req *MsgUpdateMaxInterestRateRequest) (*MsgUpdateMaxInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxInterestRate not implemented")
}
func (*UnimplementedMsgServer) UpdateInterestRate(ctx context.Context, req *MsgUpdateInterestRateRequest) (*MsgUpdateInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterestRate not implemented")
}
func (*UnimplementedMsgServer) ToggleSwapIn(ctx context.Context, req *MsgToggleSwapInRequest) (*MsgToggleSwapInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSwapIn not implemented")
}
func (*UnimplementedMsgServer) ToggleSwapOut(ctx context.Context, req *MsgToggleSwapOutRequest) (*MsgToggleSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSwapOut not implemented")
}
func (*UnimplementedMsgServer) DepositInterestFunds(ctx context.Context, req *MsgDepositInterestFundsRequest) (*MsgDepositInterestFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositInterestFunds not implemented")
}
func (*UnimplementedMsgServer) WithdrawInterestFunds(ctx context.Context, req *MsgWithdrawInterestFundsRequest) (*MsgWithdrawInterestFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInterestFunds not implemented")
}
func (*UnimplementedMsgServer) DepositPrincipalFunds(ctx context.Context, req *MsgDepositPrincipalFundsRequest) (*MsgDepositPrincipalFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPrincipalFunds not implemented")
}
func (*UnimplementedMsgServer) WithdrawPrincipalFunds(ctx context.Context, req *MsgWithdrawPrincipalFundsRequest) (*MsgWithdrawPrincipalFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawPrincipalFunds not implemented")
}
func (*UnimplementedMsgServer) ExpeditePendingSwapOut(ctx context.Context, req *MsgExpeditePendingSwapOutRequest) (*MsgExpeditePendingSwapOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpeditePendingSwapOut not implemented")
}
func (*UnimplementedMsgServer) PauseVault(ctx context.Context, req *MsgPauseVaultRequest) (*MsgPauseVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseVault not implemented")
}
func (*UnimplementedMsgServer) UnpauseVault(ctx context.Context, req *MsgUnpauseVaultRequest) (*MsgUnpauseVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseVault not implemented")
}
func (*UnimplementedMsgServer) SetBridgeAddress(ctx context.Context, req *MsgSetBridgeAddressRequest) (*MsgSetBridgeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeAddress not implemented")
}
func (*UnimplementedMsgServer) ToggleBridge(ctx context.Context, req *MsgToggleBridgeRequest) (*MsgToggleBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleBridge not implemented")
}
func (*UnimplementedMsgServer) BridgeMintShares(ctx context.Context, req *MsgBridgeMintSharesRequest) (*MsgBridgeMintSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeMintShares not implemented")
}
func (*UnimplementedMsgServer) BridgeBurnShares(ctx context.Context, req *MsgBridgeBurnSharesRequest) (*MsgBridgeBurnSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeBurnShares not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/CreateVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVault(ctx, req.(*MsgCreateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetShareDenomMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetShareDenomMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetShareDenomMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/SetShareDenomMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetShareDenomMetadata(ctx, req.(*MsgSetShareDenomMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/SwapIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapIn(ctx, req.(*MsgSwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/SwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapOut(ctx, req.(*MsgSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMinInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMinInterestRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMinInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/UpdateMinInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMinInterestRate(ctx, req.(*MsgUpdateMinInterestRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaxInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaxInterestRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaxInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/UpdateMaxInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaxInterestRate(ctx, req.(*MsgUpdateMaxInterestRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateInterestRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/UpdateInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateInterestRate(ctx, req.(*MsgUpdateInterestRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleSwapIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleSwapInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleSwapIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/ToggleSwapIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleSwapIn(ctx, req.(*MsgToggleSwapInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleSwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleSwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/ToggleSwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleSwapOut(ctx, req.(*MsgToggleSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositInterestFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositInterestFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositInterestFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/DepositInterestFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositInterestFunds(ctx, req.(*MsgDepositInterestFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawInterestFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawInterestFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawInterestFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/WithdrawInterestFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawInterestFunds(ctx, req.(*MsgWithdrawInterestFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositPrincipalFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositPrincipalFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositPrincipalFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/DepositPrincipalFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositPrincipalFunds(ctx, req.(*MsgDepositPrincipalFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawPrincipalFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawPrincipalFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawPrincipalFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/WithdrawPrincipalFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawPrincipalFunds(ctx, req.(*MsgWithdrawPrincipalFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExpeditePendingSwapOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExpeditePendingSwapOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExpeditePendingSwapOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/ExpeditePendingSwapOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExpeditePendingSwapOut(ctx, req.(*MsgExpeditePendingSwapOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/PauseVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseVault(ctx, req.(*MsgPauseVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/UnpauseVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseVault(ctx, req.(*MsgUnpauseVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBridgeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBridgeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBridgeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/SetBridgeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBridgeAddress(ctx, req.(*MsgSetBridgeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/ToggleBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleBridge(ctx, req.(*MsgToggleBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BridgeMintShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeMintSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeMintShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/BridgeMintShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeMintShares(ctx, req.(*MsgBridgeMintSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BridgeBurnShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeBurnSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeBurnShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provlabs.vault.v1.Msg/BridgeBurnShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeBurnShares(ctx, req.(*MsgBridgeBurnSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provlabs.vault.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVault",
			Handler:    _Msg_CreateVault_Handler,
		},
		{
			MethodName: "SetShareDenomMetadata",
			Handler:    _Msg_SetShareDenomMetadata_Handler,
		},
		{
			MethodName: "SwapIn",
			Handler:    _Msg_SwapIn_Handler,
		},
		{
			MethodName: "SwapOut",
			Handler:    _Msg_SwapOut_Handler,
		},
		{
			MethodName: "UpdateMinInterestRate",
			Handler:    _Msg_UpdateMinInterestRate_Handler,
		},
		{
			MethodName: "UpdateMaxInterestRate",
			Handler:    _Msg_UpdateMaxInterestRate_Handler,
		},
		{
			MethodName: "UpdateInterestRate",
			Handler:    _Msg_UpdateInterestRate_Handler,
		},
		{
			MethodName: "ToggleSwapIn",
			Handler:    _Msg_ToggleSwapIn_Handler,
		},
		{
			MethodName: "ToggleSwapOut",
			Handler:    _Msg_ToggleSwapOut_Handler,
		},
		{
			MethodName: "DepositInterestFunds",
			Handler:    _Msg_DepositInterestFunds_Handler,
		},
		{
			MethodName: "WithdrawInterestFunds",
			Handler:    _Msg_WithdrawInterestFunds_Handler,
		},
		{
			MethodName: "DepositPrincipalFunds",
			Handler:    _Msg_DepositPrincipalFunds_Handler,
		},
		{
			MethodName: "WithdrawPrincipalFunds",
			Handler:    _Msg_WithdrawPrincipalFunds_Handler,
		},
		{
			MethodName: "ExpeditePendingSwapOut",
			Handler:    _Msg_ExpeditePendingSwapOut_Handler,
		},
		{
			MethodName: "PauseVault",
			Handler:    _Msg_PauseVault_Handler,
		},
		{
			MethodName: "UnpauseVault",
			Handler:    _Msg_UnpauseVault_Handler,
		},
		{
			MethodName: "SetBridgeAddress",
			Handler:    _Msg_SetBridgeAddress_Handler,
		},
		{
			MethodName: "ToggleBridge",
			Handler:    _Msg_ToggleBridge_Handler,
		},
		{
			MethodName: "BridgeMintShares",
			Handler:    _Msg_BridgeMintShares_Handler,
		},
		{
			MethodName: "BridgeBurnShares",
			Handler:    _Msg_BridgeBurnShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provlabs/vault/v1/tx.proto",
}

func (m *MsgCreateVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalDelaySeconds != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WithdrawalDelaySeconds))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PaymentDenom) > 0 {
		i -= len(m.PaymentDenom)
		copy(dAtA[i:], m.PaymentDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PaymentDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnderlyingAsset) > 0 {
		i -= len(m.UnderlyingAsset)
		copy(dAtA[i:], m.UnderlyingAsset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnderlyingAsset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetShareDenomMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetShareDenomMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetShareDenomMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Metadata.Size()
		i -= size
		if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetShareDenomMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetShareDenomMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetShareDenomMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSwapInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SharesReceived.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemDenom) > 0 {
		i -= len(m.RedeemDenom)
		copy(dAtA[i:], m.RedeemDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RedeemDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMinInterestRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMinInterestRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMinInterestRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinRate) > 0 {
		i -= len(m.MinRate)
		copy(dAtA[i:], m.MinRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMinInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMinInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMinInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxInterestRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxInterestRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxInterestRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxRate) > 0 {
		i -= len(m.MaxRate)
		copy(dAtA[i:], m.MaxRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaxRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInterestRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInterestRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInterestRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewRate) > 0 {
		i -= len(m.NewRate)
		copy(dAtA[i:], m.NewRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleSwapInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleSwapInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleSwapInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleSwapInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleSwapInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleSwapInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleSwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleSwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleSwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleSwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleSwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleSwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositInterestFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositInterestFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositInterestFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositInterestFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositInterestFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositInterestFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawInterestFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawInterestFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawInterestFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawInterestFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawInterestFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawInterestFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositPrincipalFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositPrincipalFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositPrincipalFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositPrincipalFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositPrincipalFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositPrincipalFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawPrincipalFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawPrincipalFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawPrincipalFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawPrincipalFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawPrincipalFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawPrincipalFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExpeditePendingSwapOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpeditePendingSwapOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpeditePendingSwapOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExpeditePendingSwapOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExpeditePendingSwapOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExpeditePendingSwapOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetBridgeAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBridgeAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBridgeAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAddress) > 0 {
		i -= len(m.BridgeAddress)
		copy(dAtA[i:], m.BridgeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBridgeAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBridgeAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBridgeAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleBridgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleBridgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleBridgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBridgeMintSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeMintSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeMintSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bridge) > 0 {
		i -= len(m.Bridge)
		copy(dAtA[i:], m.Bridge)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bridge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeMintSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeMintSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeMintSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBridgeBurnSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeBurnSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeBurnSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultAddress) > 0 {
		i -= len(m.VaultAddress)
		copy(dAtA[i:], m.VaultAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VaultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bridge) > 0 {
		i -= len(m.Bridge)
		copy(dAtA[i:], m.Bridge)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bridge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeBurnSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeBurnSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeBurnSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnderlyingAsset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PaymentDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WithdrawalDelaySeconds != 0 {
		n += 1 + sovTx(uint64(m.WithdrawalDelaySeconds))
	}
	return n
}

func (m *MsgCreateVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetShareDenomMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetShareDenomMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSwapInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Assets.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharesReceived.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Assets.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RedeemDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgUpdateMinInterestRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMinInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMaxInterestRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaxRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMaxInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateInterestRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleSwapInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgToggleSwapInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleSwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgToggleSwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositInterestFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositInterestFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawInterestFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawInterestFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositPrincipalFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositPrincipalFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawPrincipalFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawPrincipalFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExpeditePendingSwapOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgExpeditePendingSwapOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPauseVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnpauseVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetBridgeAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetBridgeAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleBridgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgToggleBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBridgeMintSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bridge)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBridgeMintSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBridgeBurnSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bridge)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VaultAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBridgeBurnSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalDelaySeconds", wireType)
			}
			m.WithdrawalDelaySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalDelaySeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetShareDenomMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetShareDenomMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetShareDenomMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetShareDenomMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetShareDenomMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetShareDenomMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMinInterestRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMinInterestRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMinInterestRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMinInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMinInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMinInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxInterestRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxInterestRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxInterestRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInterestRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInterestRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInterestRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleSwapInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleSwapInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleSwapInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleSwapInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleSwapInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleSwapInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleSwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleSwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleSwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleSwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleSwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleSwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositInterestFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositInterestFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositInterestFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositInterestFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositInterestFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositInterestFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawInterestFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawInterestFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawInterestFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawInterestFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawInterestFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawInterestFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositPrincipalFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositPrincipalFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositPrincipalFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositPrincipalFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositPrincipalFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositPrincipalFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawPrincipalFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawPrincipalFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawPrincipalFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawPrincipalFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawPrincipalFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawPrincipalFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpeditePendingSwapOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpeditePendingSwapOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpeditePendingSwapOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExpeditePendingSwapOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExpeditePendingSwapOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExpeditePendingSwapOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBridgeAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBridgeAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBridgeAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBridgeAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBridgeAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBridgeAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleBridgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleBridgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleBridgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeMintSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeMintSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeMintSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeMintSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeMintSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeMintSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeBurnSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeBurnSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeBurnSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeBurnSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeBurnSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeBurnSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
