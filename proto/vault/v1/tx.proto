syntax = "proto3";
package vault.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "vault/v1/params.proto";

option go_package = "github.com/provlabs/vault/types";

// Msg is the service for the vault module's tx endpoints.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateVault creates a new vault.
  rpc CreateVault(MsgCreateVaultRequest) returns (MsgCreateVaultResponse);

  // SwapIn exchanges underlying assets for vault shares by depositing them into a vault.
  rpc SwapIn(MsgSwapInRequest) returns (MsgSwapInResponse);

  // SwapOut exchanges vault shares for underlying assets by withdrawing from a vault.
  rpc SwapOut(MsgSwapOutRequest) returns (MsgSwapOutResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // UpdateInterestRate allows the interest admin to update the current interest rate within limits.
rpc UpdateInterestRate(MsgUpdateInterestRateRequest) returns (MsgUpdateInterestRateResponse);

// DepositInterestFunds allows depositing funds into the vault for paying interest.
rpc DepositInterestFunds(MsgDepositInterestFundsRequest) returns (MsgDepositInterestFundsResponse);

// WithdrawInterestFunds allows withdrawing unused interest funds (admin only).
rpc WithdrawInterestFunds(MsgWithdrawInterestFundsRequest) returns (MsgWithdrawInterestFundsResponse);

// ToggleSwaps allows enabling or disabling all swap operations for a vault.
rpc ToggleSwaps(MsgToggleSwapsRequest) returns (MsgToggleSwapsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateVaultRequest is the request message for the CreateVault endpoint.
message MsgCreateVaultRequest {
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the creator and initial administrator of the vault.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // share_denom is the name of the assets created by the vault used for distribution.
  string share_denom = 2;
  // underlying_asset is the denomination of the asset supported by the vault.
  string underlying_asset = 3;
}

// MsgCreateVaultResponse is the response message for the CreateVault endpoint.
message MsgCreateVaultResponse {
  // vault_address is the bech32 address of the newly created vault.
  string vault_address = 1;
}

// MsgSwapInRequest is the request message for depositing underlying assets into a vault in exchange for shares.
message MsgSwapInRequest {
  option (cosmos.msg.v1.signer) = "owner";

  // owner is the address initiating the swap in (deposit).
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // vault_address is the address of the target vault.
  string vault_address = 2;
  // assets is the amount of underlying assets to deposit.
  cosmos.base.v1beta1.Coin assets = 3 [(gogoproto.nullable) = false];
}

// MsgSwapInResponse is the response message for a successful SwapIn.
message MsgSwapInResponse {
  // shares_received is the amount of vault shares minted.
  cosmos.base.v1beta1.Coin shares_received = 1 [(gogoproto.nullable) = false];
}

// MsgSwapOutRequest is the request message for redeeming vault shares in exchange for underlying assets.
message MsgSwapOutRequest {
  option (cosmos.msg.v1.signer) = "owner";

  // owner is the address initiating the swap out (withdraw).
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // vault_address is the address of the vault to redeem from.
  string vault_address = 2;
  // assets is the amount of underlying assets to withdraw.
  cosmos.base.v1beta1.Coin assets = 3 [(gogoproto.nullable) = false];
}

// MsgSwapOutResponse is the response message for a successful SwapOut.
message MsgSwapOutResponse {
  // shares_burned is the amount of shares burned in exchange for assets.
  cosmos.base.v1beta1.Coin shares_burned = 1 [(gogoproto.nullable) = false];
}

message MsgSetInterestConfigRequest {
  option (cosmos.msg.v1.signer) = "admin";

  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_address = 2;
  string min_rate = 3; 
  string max_rate = 4; 
}

message MsgSetInterestConfigResponse {}

message MsgUpdateInterestRateRequest {
  option (cosmos.msg.v1.signer) = "admin";

  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_address = 2;
  string new_rate = 3; // APY as string, e.g. "-5.00"
}

message MsgUpdateInterestRateResponse {}

message MsgDepositInterestFundsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_address = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgDepositInterestFundsResponse {}

message MsgWithdrawInterestFundsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_address = 2;
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

message MsgWithdrawInterestFundsResponse {}

message MsgToggleSwapsRequest {
  option (cosmos.msg.v1.signer) = "admin";

  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string vault_address = 2;
  bool swaps_enabled = 3;
}

message MsgToggleSwapsResponse {}
