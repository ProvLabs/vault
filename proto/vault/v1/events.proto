syntax = "proto3";
package vault.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/provlabs/vault/types";

// EventDeposit is an event emitted when assets are deposited into a vault.
message EventDeposit {
  // caller is the address of the account that initiated the deposit.
  string caller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner is the address of the account that will receive the minted shares.
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // assets is the coins amount string of the underlying assets that were deposited.
  string assets = 3;
  // shares is the coins amount string of the vault shares that were minted.
  string shares = 4;
  // vault_id is the numerical identifier of the vault.
  uint32 vault_id = 5;
}

// EventWithdraw is an event emitted when assets are withdrawn from a vault.
message EventWithdraw {
  // caller is the address of the account that initiated the withdrawal.
  string caller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // receiver is the address of the account that will receive the underlying assets.
  string receiver = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // owner is the address of the account from which the shares were burned.
  string owner = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // assets is the coins amount string of the underlying assets that were withdrawn.
  string assets = 4;
  // shares is the coins amount string of the vault shares that were burned.
  string shares = 5;
  // vault_id is the numerical identifier of the vault.
  uint32 vault_id = 6;
}

// EventVaultCreated is an event emitted when a vault is created.
message EventVaultCreated {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that manages the vault.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // share_denom is the name of the assets created by the vault used for distribution.
  string share_denom = 3;
  // underlying_assets is the denominations of the assets supported by the vault.
  repeated string underlying_assets = 4;
}

// EventSwapIn is an event emitted when assets are swapped in for vault shares.
message EventSwapIn {
  // owner is the address of the account that initiated the swap.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount_in is the amount of underlying assets that were swapped in.
  cosmos.base.v1beta1.Coin amount_in = 2 [(gogoproto.nullable) = false];
  // shares_received is the amount of vault shares that were minted.
  cosmos.base.v1beta1.Coin shares_received = 3 [(gogoproto.nullable) = false];
  // vault_address is the bech32 address of the vault.
  string vault_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventSwapOut is an event emitted when vault shares are swapped out for underlying assets.
message EventSwapOut {
  // owner is the address of the account that initiated the swap.
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // shares_burned is the amount of vault shares that were burned.
  cosmos.base.v1beta1.Coin shares_burned = 2 [(gogoproto.nullable) = false];
  // amount_out is the amount of underlying assets that were sent to the recipient.
  cosmos.base.v1beta1.Coin amount_out = 3 [(gogoproto.nullable) = false];
  // vault_address is the bech32 address of the vault.
  string vault_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// EventVaultReconcile is an event emitted when a vault's interest is reconciled.
message EventVaultReconcile {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // principal_before is the principal amount before applying interest.
  cosmos.base.v1beta1.Coin principal_before = 2 [(gogoproto.nullable) = false];

  // principal_after is the principal amount after applying interest.
  cosmos.base.v1beta1.Coin principal_after = 3 [(gogoproto.nullable) = false];

  // rate is the interest rate for the period.
  string rate = 4;

  // time is the payout duration in seconds.
  int64 time = 5;

  // interest_earned is the interest amount (can be positive or negative).
  cosmos.base.v1beta1.Coin interest_earned = 6 [(gogoproto.nullable) = false];
}

// EventVaultInterestChange is an event emitted when a vault's interest rate is changed.
message EventVaultInterestChange {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // current_rate is the interest rate actual rate the vault is using.
  string current_rate = 2;

  // desired_rate is the interest rate the admin wants to use.
  string desired_rate = 3;
}

// EventInterestDeposit is an event emitted when funds are deposited for paying interest.
message EventInterestDeposit {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that deposited the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds deposited.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// EventInterestWithdrawal is an event emitted when unused interest funds are withdrawn.
message EventInterestWithdrawal {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that withdrew the funds.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount is the amount of funds withdrawn.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
}

// EventToggleSwapIn is an event emitted when swap-in operations are enabled or disabled for a vault.
message EventToggleSwapIn {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that toggled the swap-in operations.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // enabled is the new state of swap-in operations.
  bool enabled = 3;
}

// EventToggleSwapOut is an event emitted when swap-out operations are enabled or disabled for a vault.
message EventToggleSwapOut {
  // vault_address is the bech32 address of the vault.
  string vault_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // admin is the address of the account that toggled the swap-out operations.
  string admin = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // enabled is the new state of swap-out operations.
  bool enabled = 3;
}
