// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/v1/vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VaultAccount represents a central holding place for assets, governed by a set of rules.
// It is based on the ERC-4626 standard and builds upon the Provenance Marker module.
type VaultAccount struct {
	// base_account cosmos account information including address and coin holdings.
	*types.BaseAccount `protobuf:"bytes,1,opt,name=base_account,json=baseAccount,proto3,embedded=base_account" json:"base_account,omitempty"`
	// share_denom is the denomination used to represent shares in the vault (e.g., vault tokens).
	ShareDenom string `protobuf:"bytes,2,opt,name=share_denom,json=shareDenom,proto3" json:"share_denom,omitempty"`
	// underlying_assets specifies the denomination(s) of the asset(s) managed by the vault.
	UnderlyingAssets []string `protobuf:"bytes,3,rep,name=underlying_assets,json=underlyingAssets,proto3" json:"underlying_assets,omitempty"`
	// admin is the address that has administrative privileges over the vault.
	Admin string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// current_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the actual annual interest rate currently being applied.
	// This may be adjusted programmatically (e.g., due to lack of funds).
	CurrentInterestRate string `protobuf:"bytes,5,opt,name=current_interest_rate,json=currentInterestRate,proto3" json:"current_interest_rate,omitempty"`
	// desired_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the target annual interest rate that the vault intends to apply.
	DesiredInterestRate string `protobuf:"bytes,6,opt,name=desired_interest_rate,json=desiredInterestRate,proto3" json:"desired_interest_rate,omitempty"`
	// min_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the lowest annual interest rate the admin is allowed to set.
	// If unset (empty string), there is no lower limit.
	MinInterestRate string `protobuf:"bytes,7,opt,name=min_interest_rate,json=minInterestRate,proto3" json:"min_interest_rate,omitempty"`
	// max_interest_rate is a decimal string (e.g., "0.9" for 90% and "0.9001353" for 90.01353%) representing the highest annual interest rate the admin is allowed to set.
	// If unset (empty string), there is no upper limit.
	MaxInterestRate string `protobuf:"bytes,8,opt,name=max_interest_rate,json=maxInterestRate,proto3" json:"max_interest_rate,omitempty"`
	// swap_in_enabled indicates whether users are allowed to deposit into the vault.
	SwapInEnabled bool `protobuf:"varint,9,opt,name=swap_in_enabled,json=swapInEnabled,proto3" json:"swap_in_enabled,omitempty"`
	// swap_out_enabled indicates whether users are allowed to withdraw from the vault.
	SwapOutEnabled bool `protobuf:"varint,10,opt,name=swap_out_enabled,json=swapOutEnabled,proto3" json:"swap_out_enabled,omitempty"`
}

func (m *VaultAccount) Reset()         { *m = VaultAccount{} }
func (m *VaultAccount) String() string { return proto.CompactTextString(m) }
func (*VaultAccount) ProtoMessage()    {}
func (*VaultAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{0}
}
func (m *VaultAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultAccount.Merge(m, src)
}
func (m *VaultAccount) XXX_Size() int {
	return m.Size()
}
func (m *VaultAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultAccount.DiscardUnknown(m)
}

var xxx_messageInfo_VaultAccount proto.InternalMessageInfo

func (m *VaultAccount) GetShareDenom() string {
	if m != nil {
		return m.ShareDenom
	}
	return ""
}

func (m *VaultAccount) GetUnderlyingAssets() []string {
	if m != nil {
		return m.UnderlyingAssets
	}
	return nil
}

func (m *VaultAccount) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *VaultAccount) GetCurrentInterestRate() string {
	if m != nil {
		return m.CurrentInterestRate
	}
	return ""
}

func (m *VaultAccount) GetDesiredInterestRate() string {
	if m != nil {
		return m.DesiredInterestRate
	}
	return ""
}

func (m *VaultAccount) GetMinInterestRate() string {
	if m != nil {
		return m.MinInterestRate
	}
	return ""
}

func (m *VaultAccount) GetMaxInterestRate() string {
	if m != nil {
		return m.MaxInterestRate
	}
	return ""
}

func (m *VaultAccount) GetSwapInEnabled() bool {
	if m != nil {
		return m.SwapInEnabled
	}
	return false
}

func (m *VaultAccount) GetSwapOutEnabled() bool {
	if m != nil {
		return m.SwapOutEnabled
	}
	return false
}

// VaultInterestDetails stores metadata related to interest accrual and payment for a vault.
//
// period_start represents the Unix timestamp (in seconds) when the current interest
// accrual period began. This value is updated when interest is successfully paid out.
// If multiple transactions occur in the same block, only the first will trigger interest reconciliation.
type VaultInterestDetails struct {
	// The start time (in Unix seconds) of the current interest accrual period.
	PeriodStart int64 `protobuf:"varint,1,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	// The expire time (in Unix seconds) of the current interest accrual period.
	ExpireTime int64 `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *VaultInterestDetails) Reset()         { *m = VaultInterestDetails{} }
func (m *VaultInterestDetails) String() string { return proto.CompactTextString(m) }
func (*VaultInterestDetails) ProtoMessage()    {}
func (*VaultInterestDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{1}
}
func (m *VaultInterestDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultInterestDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultInterestDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultInterestDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultInterestDetails.Merge(m, src)
}
func (m *VaultInterestDetails) XXX_Size() int {
	return m.Size()
}
func (m *VaultInterestDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultInterestDetails.DiscardUnknown(m)
}

var xxx_messageInfo_VaultInterestDetails proto.InternalMessageInfo

func (m *VaultInterestDetails) GetPeriodStart() int64 {
	if m != nil {
		return m.PeriodStart
	}
	return 0
}

func (m *VaultInterestDetails) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

// AccountBalance represents the coin balance of a single account.
type AccountBalance struct {
	// address is the account address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// coins is the balance of the account.
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountBalance) Reset()         { *m = AccountBalance{} }
func (m *AccountBalance) String() string { return proto.CompactTextString(m) }
func (*AccountBalance) ProtoMessage()    {}
func (*AccountBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c8870a404251180, []int{2}
}
func (m *AccountBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountBalance.Merge(m, src)
}
func (m *AccountBalance) XXX_Size() int {
	return m.Size()
}
func (m *AccountBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountBalance.DiscardUnknown(m)
}

var xxx_messageInfo_AccountBalance proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VaultAccount)(nil), "vault.v1.VaultAccount")
	proto.RegisterType((*VaultInterestDetails)(nil), "vault.v1.VaultInterestDetails")
	proto.RegisterType((*AccountBalance)(nil), "vault.v1.AccountBalance")
}

func init() { proto.RegisterFile("vault/v1/vault.proto", fileDescriptor_6c8870a404251180) }

var fileDescriptor_6c8870a404251180 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xbb, 0x6e, 0xd4, 0x40,
	0x14, 0x86, 0xd7, 0xd9, 0x5c, 0x76, 0x67, 0x43, 0x2e, 0x66, 0x91, 0x1c, 0x0a, 0xdb, 0xa4, 0x40,
	0x96, 0x50, 0xd6, 0x6c, 0xa8, 0xa0, 0x22, 0x4b, 0x90, 0x48, 0x85, 0xe4, 0x20, 0x8a, 0x34, 0xd6,
	0xd8, 0x3e, 0xda, 0x8c, 0xb0, 0x67, 0xac, 0x99, 0xf1, 0x92, 0xbc, 0x01, 0x25, 0x1d, 0x6d, 0x6a,
	0xea, 0xbc, 0x00, 0x5d, 0xca, 0x28, 0x15, 0x55, 0x40, 0x49, 0xc3, 0x63, 0xa0, 0xb9, 0xec, 0x86,
	0x04, 0x29, 0x95, 0xe7, 0xfc, 0xe7, 0xfc, 0xdf, 0x8c, 0xe4, 0xff, 0xa0, 0xfe, 0x04, 0x37, 0xa5,
	0x8c, 0x27, 0xc3, 0x58, 0x1f, 0x06, 0x35, 0x67, 0x92, 0xb9, 0x1d, 0x53, 0x4c, 0x86, 0x8f, 0xfd,
	0x9c, 0x89, 0x8a, 0x89, 0x18, 0x37, 0xf2, 0x30, 0x9e, 0x0c, 0x33, 0x90, 0x78, 0xa8, 0x0b, 0x33,
	0x39, 0xeb, 0x67, 0x58, 0xc0, 0xac, 0x9f, 0x33, 0x42, 0x6d, 0x7f, 0xc3, 0xf4, 0x53, 0x5d, 0xc5,
	0xa6, 0xb0, 0xad, 0xfe, 0x98, 0x8d, 0x99, 0xd1, 0xd5, 0xc9, 0xa8, 0x9b, 0x3f, 0xe6, 0xd1, 0xf2,
	0x47, 0x75, 0xfb, 0x4e, 0x9e, 0xb3, 0x86, 0x4a, 0x77, 0x0f, 0x2d, 0x2b, 0x78, 0x8a, 0x4d, 0xed,
	0x39, 0xa1, 0x13, 0xf5, 0xb6, 0xc3, 0x81, 0x65, 0xe9, 0xb7, 0xd8, 0x8b, 0x07, 0x23, 0x2c, 0xc0,
	0xfa, 0x46, 0xf3, 0xe7, 0x97, 0x81, 0x93, 0xf4, 0xb2, 0x1b, 0xc9, 0x0d, 0x50, 0x4f, 0x1c, 0x62,
	0x0e, 0x69, 0x01, 0x94, 0x55, 0xde, 0x5c, 0xe8, 0x44, 0xdd, 0x04, 0x69, 0x69, 0x57, 0x29, 0xee,
	0x33, 0xb4, 0xde, 0xd0, 0x02, 0x78, 0x79, 0x4c, 0xe8, 0x38, 0xc5, 0x42, 0x80, 0x14, 0x5e, 0x3b,
	0x6c, 0x47, 0xdd, 0x64, 0xed, 0xa6, 0xb1, 0xa3, 0x75, 0x77, 0x80, 0x16, 0x70, 0x51, 0x11, 0xea,
	0xcd, 0x2b, 0xce, 0xc8, 0xbb, 0x38, 0xdd, 0xea, 0xdb, 0x47, 0xed, 0x14, 0x05, 0x07, 0x21, 0xf6,
	0x25, 0x27, 0x74, 0x9c, 0x98, 0x31, 0xf7, 0x1d, 0x7a, 0x94, 0x37, 0x9c, 0x03, 0x95, 0x29, 0xa1,
	0x12, 0x38, 0x08, 0x99, 0x72, 0x2c, 0xc1, 0x5b, 0xd0, 0xfe, 0xfe, 0xc5, 0xe9, 0xd6, 0x9a, 0xf5,
	0xef, 0x42, 0x6e, 0xbd, 0x0f, 0xad, 0x65, 0xcf, 0x3a, 0x12, 0x2c, 0x41, 0x91, 0x0a, 0x10, 0x84,
	0x43, 0x71, 0x87, 0xb4, 0x78, 0x1f, 0xc9, 0x5a, 0x6e, 0x91, 0x5e, 0xa3, 0xf5, 0x8a, 0xd0, 0x3b,
	0x94, 0xa5, 0x7b, 0x28, 0xab, 0x15, 0xa1, 0xff, 0x11, 0xf0, 0xd1, 0x1d, 0x42, 0xe7, 0x5e, 0x02,
	0x3e, 0xba, 0x45, 0x78, 0x8a, 0x56, 0xc5, 0x67, 0x5c, 0xa7, 0x84, 0xa6, 0x40, 0x71, 0x56, 0x42,
	0xe1, 0x75, 0x43, 0x27, 0xea, 0x24, 0x0f, 0x94, 0xbc, 0x47, 0xdf, 0x1a, 0xd1, 0x8d, 0xd0, 0x9a,
	0x9e, 0x63, 0x8d, 0x9c, 0x0d, 0x22, 0x3d, 0xb8, 0xa2, 0xf4, 0xf7, 0x8d, 0xb4, 0x93, 0x9b, 0x07,
	0xa8, 0xaf, 0x23, 0x34, 0xbd, 0x66, 0x17, 0x24, 0x26, 0xa5, 0x70, 0x9f, 0xa0, 0xe5, 0x1a, 0x38,
	0x61, 0x45, 0x2a, 0x24, 0xe6, 0x26, 0x4a, 0xed, 0xa4, 0x67, 0xb4, 0x7d, 0x25, 0xa9, 0x88, 0xc0,
	0x51, 0x4d, 0x38, 0xa4, 0x92, 0x54, 0xa0, 0x23, 0xd2, 0x4e, 0x90, 0x91, 0x3e, 0x90, 0x0a, 0x36,
	0xbf, 0x39, 0x68, 0x65, 0x1a, 0x31, 0x5c, 0x62, 0x9a, 0x83, 0xeb, 0xa1, 0x25, 0x6c, 0x7e, 0xb8,
	0x26, 0x76, 0x93, 0x69, 0xe9, 0x62, 0xb4, 0xa0, 0x76, 0x41, 0x78, 0x73, 0x61, 0x3b, 0xea, 0x6d,
	0x6f, 0x4c, 0x43, 0xab, 0x42, 0x39, 0x0b, 0xed, 0x1b, 0x46, 0xe8, 0xe8, 0xf9, 0xd9, 0x65, 0xd0,
	0xfa, 0xfe, 0x2b, 0x88, 0xc6, 0x44, 0x1e, 0x36, 0xd9, 0x20, 0x67, 0x95, 0xdd, 0x16, 0xfb, 0xd9,
	0x12, 0xc5, 0xa7, 0x58, 0x1e, 0xd7, 0x20, 0xb4, 0x41, 0x24, 0x86, 0xfc, 0xaa, 0xf3, 0xe5, 0x24,
	0x68, 0xfd, 0x39, 0x09, 0x5a, 0xa3, 0x97, 0x67, 0x57, 0xbe, 0x73, 0x7e, 0xe5, 0x3b, 0xbf, 0xaf,
	0x7c, 0xe7, 0xeb, 0xb5, 0xdf, 0x3a, 0xbf, 0xf6, 0x5b, 0x3f, 0xaf, 0xfd, 0xd6, 0x41, 0xf0, 0x0f,
	0xb4, 0xe6, 0x6c, 0x52, 0xe2, 0x4c, 0x98, 0x7d, 0x37, 0xc4, 0x6c, 0x51, 0xef, 0xde, 0x8b, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0xc3, 0x2e, 0x1d, 0x0e, 0x04, 0x00, 0x00,
}

func (m *VaultAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapOutEnabled {
		i--
		if m.SwapOutEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.SwapInEnabled {
		i--
		if m.SwapInEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.MaxInterestRate) > 0 {
		i -= len(m.MaxInterestRate)
		copy(dAtA[i:], m.MaxInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.MaxInterestRate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MinInterestRate) > 0 {
		i -= len(m.MinInterestRate)
		copy(dAtA[i:], m.MinInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.MinInterestRate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DesiredInterestRate) > 0 {
		i -= len(m.DesiredInterestRate)
		copy(dAtA[i:], m.DesiredInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DesiredInterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CurrentInterestRate) > 0 {
		i -= len(m.CurrentInterestRate)
		copy(dAtA[i:], m.CurrentInterestRate)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CurrentInterestRate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnderlyingAssets) > 0 {
		for iNdEx := len(m.UnderlyingAssets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnderlyingAssets[iNdEx])
			copy(dAtA[i:], m.UnderlyingAssets[iNdEx])
			i = encodeVarintVault(dAtA, i, uint64(len(m.UnderlyingAssets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.BaseAccount != nil {
		{
			size, err := m.BaseAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVault(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultInterestDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultInterestDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultInterestDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireTime != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x10
	}
	if m.PeriodStart != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.PeriodStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAccount != nil {
		l = m.BaseAccount.Size()
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.UnderlyingAssets) > 0 {
		for _, s := range m.UnderlyingAssets {
			l = len(s)
			n += 1 + l + sovVault(uint64(l))
		}
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.CurrentInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.DesiredInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.MinInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.MaxInterestRate)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.SwapInEnabled {
		n += 2
	}
	if m.SwapOutEnabled {
		n += 2
	}
	return n
}

func (m *VaultInterestDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodStart != 0 {
		n += 1 + sovVault(uint64(m.PeriodStart))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovVault(uint64(m.ExpireTime))
	}
	return n
}

func (m *AccountBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAccount == nil {
				m.BaseAccount = &types.BaseAccount{}
			}
			if err := m.BaseAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingAssets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingAssets = append(m.UnderlyingAssets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxInterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapInEnabled = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapOutEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultInterestDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultInterestDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultInterestDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
			}
			m.PeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
